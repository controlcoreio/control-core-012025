{
  "version": "1.0.0",
  "summary": "FINTRAC Suspicious Transaction Report (STR) triggers monitoring and reporting for Canadian financial institutions",
  "detailed_description": "This policy template enforces FINTRAC Suspicious Transaction Report (STR) submission requirements for Canadian financial institutions under the Proceeds of Crime (Money Laundering) and Terrorist Financing Act (PCMLTFA). Financial institutions must submit STRs to FINTRAC when they have reasonable grounds to suspect that a transaction or attempted transaction is related to money laundering or terrorist financing. The policy monitors for suspicious transaction indicators including unusual transaction patterns, structuring (breaking large transactions into smaller amounts to avoid reporting thresholds), rapid movement of funds, transactions inconsistent with customer profile, high-risk jurisdictions, and politically exposed persons (PEP) involvement. It automates detection of STR triggers, flags transactions for compliance officer review, ensures timely STR submission (within 30 days of suspicion), and maintains audit trails for FINTRAC examination. Supports money services businesses, banks, credit unions, securities dealers, life insurance companies, real estate brokers, and casinos/gaming operators subject to FINTRAC reporting obligations.",
  "use_cases": [
    {
      "title": "TD Bank: Automated STR Detection for Structuring Patterns",
      "description": "Deploy fintrac-str-triggers for automated suspicious transaction monitoring",
      "scenario": "TD detects customer depositing $9,500 cash 12 times over 3 weeks (total $114K) - classic structuring to avoid $10K Large Cash Transaction Report threshold. AML system flags: Frequency (12 deposits in 3 weeks abnormal for customer profile), amounts just below threshold (pattern indicates awareness of $10K reporting), cash-intensive (legitimate business uses electronic payments). Compliance review: Customer claims cash from small business (convenience store), requested business documentation (incorporation, business license, sales records), business records show $30K monthly cash sales (consistent with deposits), conclusion: Suspicious (deposit pattern indicates possible cash smuggling, sales records could be falsified). STR filed Day 5: Transaction details, customer profile, investigation notes, suspicion basis: 'Structured deposits to avoid LCTR reporting, possible proceeds of crime'. FINTRAC response: Incorporated into intelligence analysis, cross-referenced with other FI reports, eventual law enforcement investigation launched. Result: FINTRAC compliance maintained, customer activity continues to be monitored (enhanced monitoring for 12 months), if pattern persists → account closure. Regulatory: Zero FINTRAC examination findings on STR process, strong suspicious activity detection."
    },
    {
      "title": "BMO: PEP Transaction Monitoring and STR Submission",
      "description": "Implement fintrac-str-triggers for Politically Exposed Person surveillance",
      "scenario": "BMO customer identified as foreign PEP (government minister from African country) makes large wire transfer ($500K CAD) to offshore account in tax haven jurisdiction. AML red flags: PEP status (high-risk for corruption), large transfer (unusual for account history), destination jurisdiction (known for banking secrecy), timing (coincides with news reports of corruption investigation in PEP's home country). Compliance investigation: Source of funds review (PEP claims legitimate business proceeds, provided contracts/invoices), beneficial owner of receiving account unclear (offshore structure), news media search (multiple corruption allegations, no charges filed), PEP interview (defensive, reluctant to provide details). Conclusion: Reasonable grounds to suspect proceeds of corruption. STR filed: PEP details, transaction specifics, investigation findings, media reports attached, suspicion: 'Possible proceeds of corruption being moved offshore ahead of investigation'. Law enforcement cooperation: RCMP Financial Crime unit requested details (Bank cooperated, provided transaction records), investigation ongoing. Account decision: Relationship terminated (BMO policy: exit PEP relationships with corruption concerns), account closed after 30-day notice, remaining balance returned to PEP. FINTRAC examination: Appropriate STR submission with strong investigation, commended for PEP monitoring and risk-based account closure decision."
    },
    {
      "title": "Scotiabank: Trade-Based Money Laundering Detection",
      "description": "Use fintrac-str-triggers for complex money laundering scheme detection",
      "scenario": "Scotiabank customer (import/export business) shows red flags for trade-based money laundering: Over-invoicing (importing $1M in goods, invoice shows $5M - $4M potential laundered), rapid fund movement (funds arrive from offshore, paid to supplier immediately, no inventory buildup), multiple jurisdictions (supplier in high-risk country, customer in Canada, payments routed through 3 countries), shell company indicators (customer company minimal online presence, unclear business purpose). Compliance investigation: Review import documentation (invoices, shipping records, customs declarations), compare invoice values to market prices (identified massive over-invoicing), interview customer (vague about business operations, couldn't explain pricing), consult trade finance experts (confirmed invoicing inconsistent with commodity markets). Conclusion: Strong indicators of trade-based money laundering (using inflated invoices to justify large payment transfers, disguising proceeds of crime as legitimate trade). STR filed: Trade finance details, pricing analysis, investigation findings, suspicion: 'Trade-based money laundering using over-invoiced imports to move proceeds of crime'. Regulatory cooperation: CBSA (Canada Border Services Agency) notified of possible customs fraud, joint investigation with RCMP, customer under surveillance. Bank action: Account relationship terminated, funds frozen pending law enforcement clearance. Investigation outcome: Criminal charges filed 8 months later (money laundering, fraud), Scotiabank's STR cited in court documents as evidence. FINTRAC: Excellent detection of complex money laundering typology, strong trade finance expertise in AML team."
    },
    {
      "title": "Tangerine: Rapid Movement of Funds STR Indicator",
      "description": "Deploy fintrac-str-triggers for pass-through account detection",
      "scenario": "Tangerine detects suspicious pattern: Customer receives $50K e-transfer deposit, within 2 hours transfers entire amount to different account via 5 separate transfers ($10K each). Red flags: Rapid movement (no legitimate reason to receive and immediately disburse entire amount), pass-through account (account used as conduit, not for saving/spending), structuring outbound transfers (5 × $10K to potentially avoid detection). Compliance review: Customer contacted (claimed receiving money from sale of vehicle, sending to family members), requested vehicle sale documentation (unable to provide ownership documents, bill of sale vague), beneficiary analysis (5 recipients all have same surname - family claim plausible BUT amounts suspicious). Enhanced due diligence: Verify vehicle ownership (customer never owned vehicle matching description - story false), source of funds (e-transfer sender also flagged in other bank's AML system - known fraudster), conclusion: Customer likely money mule (wittingly or unwittingly facilitating fraud/money laundering). STR filed: Transaction timeline, customer interview notes, vehicle ownership search results, suspicion: 'Account used as pass-through for potential proceeds of fraud, customer providing false information'. Action: Account closed, $50K held pending investigation (potential fraud victim restitution), customer placed on internal blacklist, e-transfer sender's bank notified. Outcome: Fraudster's network disrupted (multiple money mules identified across banks through FINTRAC intelligence), $50K returned to fraud victim (elderly person scammed). FINTRAC: Good detection of money mule activity, appropriate action to disrupt fraud network."
    },
    {
      "title": "National Bank: Cryptocurrency Exchange Suspicious Activity",
      "description": "Apply fintrac-str-triggers for crypto-related money laundering detection",
      "scenario": "National Bank customer makes frequent large cash deposits ($8K-$9K, just below $10K LCTR threshold) totaling $500K over 6 months, then transfers entire balance to cryptocurrency exchange (Kraken, international exchange). Suspicion indicators: Cash structuring (systematic avoidance of $10K threshold), crypto destination (high-risk for money laundering - pseudo-anonymous), customer profile inconsistent (modest income, large cash sources unexplained), no previous crypto activity (sudden pivot to crypto suspicious). Investigation: Customer claims cash from 'selling personal items online' (Kijiji, Facebook Marketplace), requested sales records (none provided - claimed 'didn't keep records'), crypto trading history (massive losses within 2 months - $500K reduced to $100K through poor trades), outcome: Most of deposited cash lost to crypto volatility. Analysis: Possible scenarios (1) Laundering proceeds of crime through crypto (even with losses, crypto provides anonymity), (2) Gambling addiction using crypto casinos (also money laundering concern), (3) Legitimate but financially unsophisticated person. Conclusion: Insufficient explanation for cash source + structuring pattern = reasonable grounds for suspicion. STR filed: Cash deposit details, structuring pattern analysis, crypto transfer details, customer interview, suspicion: 'Structured cash deposits followed by crypto transfer, possible money laundering or crypto gambling, source of cash unverified'. Account action: Enhanced monitoring (flagged for ongoing surveillance), if pattern continues → relationship termination. FINTRAC: Appropriate STR filing for crypto-related suspicious activity, good analysis of customer behavior and transaction patterns."
    },
    {
      "title": "Wealthsimple: Fintech STR Reporting for Digital Banking",
      "description": "Implement fintrac-str-triggers for neo-bank AML surveillance",
      "scenario": "Wealthsimple (digital bank + investment platform) uses ML-based transaction monitoring for STR detection across 3M customers. Suspicious pattern detected: Customer receives 50 small deposits ($200-$500 each, total $15K) from 50 different individuals (all strangers per social network analysis), then makes single $14K transfer to offshore account. ML model flags (anomaly score 0.92/1.0): Receiving many payments from unrelated parties (possible illegal marketplace seller, romance scam operator, or money mule recruitment), aggregating funds then sending offshore (laundering indicator), no clear economic purpose. Investigation: Customer interview via secure message (claimed 'freelance work, multiple clients paying for services'), requested invoices/contracts (provided generic invoices with vague descriptions like 'consulting services'), recipient account research (offshore company in tax haven with opaque ownership). Compliance decision: File STR (insufficient legitimate explanation, offshore destination increases suspicion, customer evasive in providing details). STR submission: Digital STR portal (FINTRAC online submission), attached evidence (transaction patterns, customer communications, invoices reviewed), narrative: 'Customer receiving numerous small payments then aggregating and sending offshore, possible illegal online marketplace or money laundering network'. Investigation outcome: Customer account closed, FINTRAC incorporated report into broader investigation of suspected illegal gambling website (customer was payment processor for site), law enforcement action pending. Wealthsimple benefit: Proactive AML caught criminal activity early, ML-based detection more effective than rules-based (detected novel pattern), digital-first STR submission efficient. FINTRAC: Strong use of technology for AML, effective investigation, timely STR submission."
    }
  ],
  "conditions": [
    {
      "name": "action",
      "type": "string",
      "description": "The action attribute used in policy evaluation.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'action' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'action' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'action':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'action' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "read"
    },
    {
      "name": "context.currency",
      "type": "object",
      "description": "Context attribute 'currency' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.currency' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.currency' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.currency':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.currency' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.customer_risk_level",
      "type": "integer",
      "description": "Context attribute 'customer_risk_level' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.customer_risk_level' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.customer_risk_level' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.customer_risk_level':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.customer_risk_level' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "5"
    },
    {
      "name": "context.customer_type",
      "type": "object",
      "description": "Context attribute 'customer_type' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.customer_type' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.customer_type' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.customer_type':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.customer_type' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"type\": \"enterprise\", \"tier\": \"premium\", \"risk_level\": \"low\"}"
    },
    {
      "name": "context.destination_country",
      "type": "integer",
      "description": "Context attribute 'destination_country' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.destination_country' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.destination_country' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.destination_country':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.destination_country' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "10"
    },
    {
      "name": "context.suspicious_patterns",
      "type": "object",
      "description": "Context attribute 'suspicious_patterns' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.suspicious_patterns' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.suspicious_patterns' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.suspicious_patterns':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.suspicious_patterns' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.transaction_amount",
      "type": "object",
      "description": "Context attribute 'transaction_amount' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.transaction_amount' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.transaction_amount' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.transaction_amount':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.transaction_amount' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.transaction_frequency",
      "type": "object",
      "description": "Context attribute 'transaction_frequency' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.transaction_frequency' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.transaction_frequency' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.transaction_frequency':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.transaction_frequency' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "resource.type",
      "type": "object",
      "description": "Resource attribute 'type' - identifies or describes the resource being accessed. This helps determine if the resource characteristics match policy requirements.",
      "required": true,
      "data_sources": [
        {
          "name": "Resource Registry or Catalog",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Metadata",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "API Gateway Configuration",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'resource.type' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'resource.type' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'resource.type':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'resource.type' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"type\": \"document\", \"category\": \"financial\"}"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.currency",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.currency",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.customer_type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.customer_type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.destination_country",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.destination_country",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.suspicious_patterns",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.suspicious_patterns",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.transaction_amount",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.transaction_amount",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.transaction_frequency",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.transaction_frequency",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.resource.type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "monitoring_and_logging": [
        {
          "condition": "input.context.customer_risk_level",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.customer_risk_level",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "Medium - Moderate complexity requiring multiple integrations"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and ensure all prerequisites are met",
      "2. Configure data sources and integrations in Control Core",
      "3. Map required attributes (9 conditions identified) to your data sources",
      "4. Deploy policy to Sandbox environment using Control Core Admin UI",
      "5. Configure test users, resources, and scenarios in Sandbox",
      "6. Run comprehensive tests with various authorization scenarios",
      "7. Monitor policy evaluation logs and adjust conditions as needed",
      "8. Validate audit logging and compliance reporting",
      "9. Conduct user acceptance testing with stakeholders",
      "10. Promote to Production with gradual rollout (shadow mode, then enforcement)",
      "11. Set up monitoring alerts for policy violations and errors",
      "12. Document policy configuration and operational procedures"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • Resource with correct classification → ALLOW",
      "      • Resource marked as restricted → DENY for non-owners",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "configuration_tips": [
      "Start with permissive policies and gradually tighten restrictions",
      "Use policy versioning to track changes and enable rollbacks",
      "Implement comprehensive logging before enforcement",
      "Test in shadow mode to observe behavior without blocking access",
      "Document all customizations and environment-specific settings",
      "Set up monitoring dashboards for policy metrics",
      "Create runbooks for common policy-related incidents",
      "Establish a policy review and update schedule"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "troubleshooting": [
      "Check Control Core logs if policy evaluation fails",
      "Verify all required attributes are available in request context",
      "Ensure data source integrations are healthy and responsive",
      "Review audit logs to understand policy decisions",
      "Use Control Core's policy testing tools to debug conditions",
      "Check for network connectivity issues between PEP and PDP",
      "Verify policy syntax and structure using validator",
      "Contact Control Core support for persistent issues"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 9 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.currency'",
      "     - API: REST API endpoint",
      "     - Field: context.currency",
      "     - Method: REST API",
      "\n📦 Monitoring And Logging:",
      "   • Configure Custom data source integration for 'input.context.customer_risk_level'",
      "     - API: REST API endpoint",
      "     - Field: context.customer_risk_level",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • Resource conditions (1): resource.type",
      "   • Context conditions (7): context.currency, context.customer_risk_level, context.customer_type",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.currency' - track null/missing values",
      "     3. Monitor 'input.context.customer_risk_level' - track null/missing values",
      "     4. Monitor 'input.context.customer_type' - track null/missing values",
      "     5. Monitor 'input.context.destination_country' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "FINTRAC",
    "PCMLTFA (Proceeds of Crime Money Laundering and Terrorist Financing Act)",
    "FATF Recommendation 20",
    "OSFI E-21 (Operational Risk)",
    "Criminal Code of Canada (Money Laundering)"
  ],
  "risk_level": "critical",
  "tags": [
    "compliance",
    "triggers",
    "fintrac",
    "rbac",
    "monitoring"
  ],
  "related_templates": [
    "audit-logging-retention",
    "gdpr-data-protection",
    "sox-compliance-controls",
    "hipaa-healthcare-privacy"
  ],
  "conditions_analysis": {
    "total_conditions": 9,
    "user_attributes": 0,
    "resource_attributes": 1,
    "context_attributes": 7
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action",
          "input.context.transaction_amount",
          "input.context.transaction_frequency"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 3 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action, action, action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action",
          "input.context.transaction_amount",
          "input.context.transaction_frequency"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 3 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete, GET→read, POST→create, DELETE→delete, GET→read, POST→create, DELETE→delete"
      },
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.context.currency",
          "input.context.customer_type",
          "input.context.destination_country",
          "input.context.suspicious_patterns",
          "input.resource.type",
          "input.context.customer_risk_level"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 6 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: context.currency, context.customer_type, context.destination_country"
      }
    ]
  }
}