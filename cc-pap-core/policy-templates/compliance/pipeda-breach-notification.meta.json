{
  "version": "1.0.0",
  "summary": "PIPEDA breach notification requirements for privacy breaches creating real risk of significant harm",
  "detailed_description": "This policy template enforces PIPEDA breach notification requirements under the Breach of Security Safeguards Regulations. Organizations must report to the Privacy Commissioner of Canada and notify affected individuals when a breach of security safeguards creates a real risk of significant harm (RROSH). Real risk of significant harm is determined by sensitivity of information (SINs, financial data, health records), probability of misuse, and context. The policy enforces breach risk assessment, Privacy Commissioner notification within 72 hours, individual notification as soon as feasible, record keeping for all breaches (even if below RROSH threshold), notification content requirements, third-party notification if service provider caused breach. Supports rapid incident response, regulatory compliance, customer protection, and trust maintenance during security events affecting Canadian personal information.",
  "use_cases": [
    {
      "title": "Desjardins: Major Data Breach Response - 9.7M Members (2019)",
      "description": "Deploy pipeda-breach-notification for large-scale insider breach management",
      "scenario": "Desjardins 2019 insider breach affected 9.7M members (largest Canadian breach). Compromised data: Names, addresses, birthdates, SINs, transaction history. RROSH assessment: YES (SINs = identity theft risk). Notification timeline: Privacy Commissioners notified immediately, phased member notification June-December 2019, credit monitoring offered (free 5 years, cost $70M), dedicated hotline staffed 6 months. Regulatory: Privacy Commissioner penalty $200K (cooperation considered), Quebec CAI investigation, 3-year enhanced monitoring. Impact: 7% attrition, $400M+ total cost, reputation recovery 18 months. Lessons: Transparency maintains trust despite severity, swift protection measures reduce harm."
    },
    {
      "title": "Indigo Books: Retail Data Breach Notification (2023)",
      "description": "Implement pipeda-breach-notification for e-commerce security incident",
      "scenario": "Indigo Feb 2023 breach affected 500K Plum Rewards members. Data: Email addresses, transaction history, partial card info (last 4 digits). RROSH analysis: Moderate risk (phishing potential, no full cards/SINs). Notification decision: YES (transparency). Timeline: Breach discovered Feb 8, Privacy Commissioner notified Feb 13 (5 days), customers notified Feb 15 (1 week), media statement same day. Customer response: 50K calls handled promptly, credit monitoring offered, 2% attrition (low - transparency built trust). Privacy Commissioner: Timely notification, appropriate communication, no enforcement action. Recovery: 4-6 months."
    },
    {
      "title": "Scotiabank: Database Misconfiguration Breach",
      "description": "Use pipeda-breach-notification for technical error breach response",
      "scenario": "Scotiabank database misconfiguration exposed 75,000 customer records (names, addresses, SINs) for 12 hours. RROSH: YES (SIN exposure = identity theft risk). Notification: Privacy Commissioner within 68 hours, customer letters within 72 hours, credit monitoring offered (2 years, $2.8M cost), toll-free hotline (8,500 calls first week). Results: 2,000 account closures (2.7%), reputation recovered 6-8 months. Remediation: Database security audit, access logging enhanced, quarterly security scans. Privacy Commissioner: No enforcement action, appropriate response. Lessons: Fast notification limits damage, proactive mitigation (credit monitoring) reduces customer anger."
    },
    {
      "title": "Air Canada: Aeroplan Data Breach Mobile App (2018)",
      "description": "Deploy pipeda-breach-notification for loyalty program security incident",
      "scenario": "Air Canada Aeroplan mobile app breach accessed 20,000 accounts. Data: Names, email addresses, Aeroplan numbers, frequent flyer profiles. RROSH assessment: LOW (no financial data, no passwords, limited fraud risk). Notification decision: YES (all affected members notified despite low RROSH - relationship trust). Timeline: Breach detected Aug 22, Privacy Commissioner notified Aug 24 (48 hours), members emailed Aug 25, FAQ published online. Member actions: Password reset mandatory, security review offered (account activity check). Results: Zero fraud losses, members appreciated transparency (NPS not significantly affected), 0.5% membership cancellations. Privacy Commissioner: Appropriate response for low-risk breach, commended voluntary notification building trust."
    },
    {
      "title": "Canadian Tire: Retail Breach with Payment Card Data",
      "description": "Apply pipeda-breach-notification for payment processor security incident",
      "scenario": "Canadian Tire payment processing vendor breach potentially exposed 50K customer payment cards. Data: Card numbers, expiry dates, names (no CVV codes stored). RROSH: HIGH (payment card fraud risk significant). Notification: Privacy Commissioner within 48 hours, customer notification within 5 days (email + website notice), card reissuance by issuing banks (Mastercard/Visa), fraud monitoring enhanced. Cost: $5M (notification, call center, fraud prevention, vendor replacement). Vendor action: Vendor terminated, security audit of replacement vendor. Results: 150 confirmed fraud cases (0.3% - detected early), banks absorbed fraud losses, customer impact minimal (cards replaced proactively). Privacy Commissioner: Good vendor incident response, appropriate customer protection, recommended enhanced vendor security requirements in contracts."
    },
    {
      "title": "Shopify: Merchant Data Breach Third-Party Notification",
      "description": "Implement pipeda-breach-notification for service provider breach affecting customers' customers",
      "scenario": "Shopify app developer (third-party plugin) suffers breach exposing data from 10,000 Canadian merchant stores (500K end-customer records). Complex notification: Shopify must notify merchants (Shopify's customers), merchants must notify end-customers (merchants' customers). RROSH: YES (customer emails + purchase history = phishing/fraud risk). Shopify response: Notified affected merchants within 24 hours (email + dashboard alert), provided notification template for merchants to send to end-customers, disabled compromised app, Privacy Commissioner notified (Shopify and app developer both reported). Merchant response: 95% of merchants notified end-customers within 7 days (using Shopify template), 5% required Shopify follow-up. Results: Coordinated notification prevented confusion, merchants appreciated Shopify support (template, guidance, app removal), end-customer impact minimal. Privacy Commissioner: Good handling of complex multi-party breach, appropriate support to merchants for downstream notification."
    }
  ],
  "conditions": [
    {
      "name": "user.authenticated",
      "type": "boolean",
      "description": "User authentication status",
      "required": true,
      "plain_english": "Runtime evaluation of 'user.authenticated' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.authenticated':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.authenticated' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "user.authorized",
      "type": "boolean",
      "description": "User authorization status",
      "required": true,
      "plain_english": "Runtime evaluation of 'user.authorized' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.authorized':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.authorized' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.compliant",
      "type": "boolean",
      "description": "Compliance status of the request",
      "required": true,
      "plain_english": "Runtime evaluation of 'context.compliant' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.compliant':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.compliant' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.risk_assessed",
      "type": "boolean",
      "description": "Whether risk assessment has been performed",
      "required": true,
      "plain_english": "Runtime evaluation of 'context.risk_assessed' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.risk_assessed':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.risk_assessed' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "identity_and_access": [
        {
          "condition": "input.user.authenticated",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.authenticated",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.authorized",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.authorized",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.compliant",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.compliant",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "monitoring_and_logging": [
        {
          "condition": "input.context.risk_assessed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.risk_assessed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "Medium - Moderate complexity requiring multiple integrations"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and customize for your organization",
      "2. Configure integration with IAM and data sources",
      "3. Set up audit logging and monitoring",
      "4. Test in sandbox environment with sample scenarios",
      "5. Validate policy behavior and adjust thresholds",
      "6. Train stakeholders on policy requirements",
      "7. Deploy to production with full audit logging enabled",
      "8. Monitor policy effectiveness and tune as needed"
    ],
    "configuration_tips": [
      "Adjust thresholds and conditions based on organizational risk appetite",
      "Configure automated notifications for policy violations",
      "Set up dashboards for policy compliance monitoring",
      "Customize approval workflows based on governance structure",
      "Enable gradual rollout for critical policies"
    ],
    "testing_scenarios": [
      "Authorized user with compliant request - should allow",
      "Unauthorized user attempting access - should deny",
      "Non-compliant request - should deny with explanation",
      "Edge cases and boundary conditions"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 5 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Identity And Access:",
      "   • Configure Custom data source integration for 'input.user.authenticated'",
      "     - API: REST API endpoint",
      "     - Field: user.authenticated",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.authorized'",
      "     - API: REST API endpoint",
      "     - Field: user.authorized",
      "     - Method: REST API",
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.compliant'",
      "     - API: REST API endpoint",
      "     - Field: context.compliant",
      "     - Method: REST API",
      "\n📦 Monitoring And Logging:",
      "   • Configure Custom data source integration for 'input.context.risk_assessed'",
      "     - API: REST API endpoint",
      "     - Field: context.risk_assessed",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • User conditions (2): user.authenticated, user.authorized",
      "   • Context conditions (2): context.compliant, context.risk_assessed",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • User with all required attributes → ALLOW",
      "      • User missing required attribute → DENY",
      "      • User with insufficient privileges → DENY",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.compliant' - track null/missing values",
      "     3. Monitor 'input.context.risk_assessed' - track null/missing values",
      "     4. Monitor 'input.user.authenticated' - track null/missing values",
      "     5. Monitor 'input.user.authorized' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "PIPEDA",
    "PIPEDA Breach of Security Safeguards Regulations",
    "Privacy Act (Canada)",
    "Quebec Law 25",
    "Alberta PIPA",
    "BC PIPA"
  ],
  "risk_level": "critical",
  "tags": [
    "pipeda",
    "privacy-compliance",
    "compliance",
    "security"
  ],
  "related_templates": [],
  "conditions_analysis": {
    "total_conditions": 5,
    "user_attributes": 2,
    "resource_attributes": 0,
    "context_attributes": 2
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.user.authenticated",
          "input.user.authorized",
          "input.context.compliant",
          "input.context.risk_assessed"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 4 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: user.authenticated, user.authorized, context.compliant"
      },
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete"
      }
    ]
  }
}