{
  "version": "1.0.0",
  "summary": "Enforce access based on data sensitivity labels",
  "detailed_description": "Enforce access based on data sensitivity labels. This policy provides comprehensive controls and enforcement mechanisms aligned with industry standards and best practices. It enables organizations to maintain compliance, reduce security risks, and automate policy enforcement.",
  "use_cases": [
    {
      "title": "Data Lake Security: Research Access to Sensitive Data",
      "description": "Use sensitivity-label-enforcement.meta to control access to enterprise data lake",
      "scenario": "Pharmaceutical company with data lake containing clinical trial data (5PB, 1000+ datasets). Chief Data Officer requirements: (1) Data scientists access only relevant datasets, (2) PII automatically masked for non-clinical staff, (3) Competitive intelligence data restricted to senior leadership, (4) Data lineage tracked for regulatory submissions. Policy enforces: Dataset-level access based on project assignment in JIRA, automatic PII detection and masking using ML, executive-only access to acquisition target data, audit log every data access with project code. FDA audit: Demonstrated complete data governance, zero findings on data integrity."
    },
    {
      "title": "Customer 360: GDPR Right to Erasure Across Data Silos",
      "description": "Deploy sensitivity-label-enforcement.meta to handle data deletion requests across systems",
      "scenario": "Telecom provider with customer data in 25+ systems (CRM, billing, network logs, support tickets). GDPR officer challenge: Locate and delete all personal data within 30 days. Policy implementation: PII tagged with customer ID across all systems, automated discovery workflow queries all 25 systems, deletion orchestrator coordinates removal across databases, retention policy exceptions (e.g., legal holds) flagged, verification report generated for customer. Metrics: Average deletion time reduced from 45 days (manual) to 7 days (automated), data accuracy 99.8%, zero regulatory complaints."
    },
    {
      "title": "Financial Reporting: Sox Compliance for Data Changes",
      "description": "Apply sensitivity-label-enforcement.meta to ensure Sox-compliant financial data handling",
      "scenario": "Public company must prove financial data integrity for Sox 404 audit. External auditors test: (1) Unauthorized users can't modify financial data, (2) All changes logged with business justification, (3) Segregation of duties (preparer ≠ approver), (4) Changes outside close period blocked. Policy enforces: Read-only access to GL for all except Finance team (5 people), all GL changes require CFO approval via workflow, period close locks all entries (no backdating), audit trail captures changed values, approver, timestamp, reason code. External audit: Zero material weaknesses, praised for automated controls, audit time reduced 40%."
    },
    {
      "title": "Data Classification: Auto-Classification for Regulatory Compliance",
      "description": "Implement sensitivity-label-enforcement.meta for automatic data sensitivity labeling",
      "scenario": "Insurance company with 50TB of documents must classify by sensitivity (Public, Internal, Confidential, Restricted). General Counsel requirement: Prove appropriate handling based on classification. Policy automates: ML-based classification scanning documents for PII, PHI, payment data, executive communications; auto-tagging with sensitivity label; encryption enforcement for Confidential/Restricted; access controls based on labels; DLP policies preventing external sharing of Restricted data. Results: Classified 10M documents in 90 days (vs 18 months manual estimate), prevented 50 inadvertent Restricted data shares, passed privacy audit."
    },
    {
      "title": "Data Retention: Automated Lifecycle Management",
      "description": "Use sensitivity-label-enforcement.meta to enforce data retention and deletion policies",
      "scenario": "Healthcare provider must balance retention requirements (6 years for medical records) with storage costs and privacy. COO goals: (1) Comply with retention laws, (2) Delete data when no longer needed, (3) Reduce storage costs, (4) Support litigation holds. Policy implements: Automatic tagging with retention class at data creation, countdown timer to deletion date, litigation hold flag stops deletion, archive to cold storage after 3 years, permanent deletion after 6 years with compliance approval, audit trail for all deletions. Results: Reduced storage costs $500K/year, demonstrated compliance with 50+ state retention laws, zero sanctions for spoliation."
    }
  ],
  "conditions": [
    {
      "name": "user.authenticated",
      "type": "boolean",
      "description": "User authentication status",
      "required": true,
      "plain_english": "Runtime evaluation of 'user.authenticated' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.authenticated':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.authenticated' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "user.authorized",
      "type": "boolean",
      "description": "User authorization status",
      "required": true,
      "plain_english": "Runtime evaluation of 'user.authorized' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.authorized':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.authorized' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.compliant",
      "type": "boolean",
      "description": "Compliance status of the request",
      "required": true,
      "plain_english": "Runtime evaluation of 'context.compliant' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.compliant':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.compliant' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.risk_assessed",
      "type": "boolean",
      "description": "Whether risk assessment has been performed",
      "required": true,
      "plain_english": "Runtime evaluation of 'context.risk_assessed' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.risk_assessed':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.risk_assessed' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "identity_and_access": [
        {
          "condition": "input.user.authenticated",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.authenticated",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.authorized",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.authorized",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.compliant",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.compliant",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "monitoring_and_logging": [
        {
          "condition": "input.context.risk_assessed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.risk_assessed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "Medium - Moderate complexity requiring multiple integrations"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and customize for your organization",
      "2. Configure integration with IAM and data sources",
      "3. Set up audit logging and monitoring",
      "4. Test in sandbox environment with sample scenarios",
      "5. Validate policy behavior and adjust thresholds",
      "6. Train stakeholders on policy requirements",
      "7. Deploy to production with full audit logging enabled",
      "8. Monitor policy effectiveness and tune as needed"
    ],
    "configuration_tips": [
      "Adjust thresholds and conditions based on organizational risk appetite",
      "Configure automated notifications for policy violations",
      "Set up dashboards for policy compliance monitoring",
      "Customize approval workflows based on governance structure",
      "Enable gradual rollout for critical policies"
    ],
    "testing_scenarios": [
      "Authorized user with compliant request - should allow",
      "Unauthorized user attempting access - should deny",
      "Non-compliant request - should deny with explanation",
      "Edge cases and boundary conditions"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 5 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Identity And Access:",
      "   • Configure Custom data source integration for 'input.user.authenticated'",
      "     - API: REST API endpoint",
      "     - Field: user.authenticated",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.authorized'",
      "     - API: REST API endpoint",
      "     - Field: user.authorized",
      "     - Method: REST API",
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.compliant'",
      "     - API: REST API endpoint",
      "     - Field: context.compliant",
      "     - Method: REST API",
      "\n📦 Monitoring And Logging:",
      "   • Configure Custom data source integration for 'input.context.risk_assessed'",
      "     - API: REST API endpoint",
      "     - Field: context.risk_assessed",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • User conditions (2): user.authenticated, user.authorized",
      "   • Context conditions (2): context.compliant, context.risk_assessed",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • User with all required attributes → ALLOW",
      "      • User missing required attribute → DENY",
      "      • User with insufficient privileges → DENY",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.compliant' - track null/missing values",
      "     3. Monitor 'input.context.risk_assessed' - track null/missing values",
      "     4. Monitor 'input.user.authenticated' - track null/missing values",
      "     5. Monitor 'input.user.authorized' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "Data Governance"
  ],
  "risk_level": "high",
  "tags": [
    "data-classification",
    "data-governance",
    "compliance",
    "security"
  ],
  "related_templates": [],
  "conditions_analysis": {
    "total_conditions": 5,
    "user_attributes": 2,
    "resource_attributes": 0,
    "context_attributes": 2
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.user.authenticated",
          "input.user.authorized",
          "input.context.compliant",
          "input.context.risk_assessed"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 4 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: user.authenticated, user.authorized, context.compliant"
      },
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete"
      }
    ]
  }
}