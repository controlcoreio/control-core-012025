# GitHub Actions Workflow for Control Core Deployment
# Save this as .github/workflows/deploy-controlcore.yml in your repository

name: Deploy Control Core

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:  # Allow manual triggering

env:
  DOCKER_REGISTRY: your-registry.azurecr.io  # Change to your registry
  TENANT_ID: ${{ secrets.CONTROLCORE_TENANT_ID }}
  API_KEY: ${{ secrets.CONTROLCORE_API_KEY }}

jobs:
  # Job 1: Deploy Control Plane (for Kickstart/Custom tiers)
  deploy-control-plane:
    name: Deploy Control Plane
    runs-on: ubuntu-latest
    if: ${{ vars.DEPLOYMENT_TIER == 'kickstart' || vars.DEPLOYMENT_TIER == 'custom' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Deploy Control Plane
        run: |
          docker-compose -f controlcore-compose.yml pull
          docker-compose -f controlcore-compose.yml up -d
      
      - name: Wait for Control Plane to be ready
        run: |
          echo "Waiting for Control Plane..."
          sleep 30
          
          # Check health
          for i in {1..10}; do
            if curl -s -f http://localhost:8082/api/v1/health > /dev/null; then
              echo "Control Plane is ready!"
              exit 0
            fi
            echo "Attempt $i/10 - waiting..."
            sleep 5
          done
          
          echo "Control Plane failed to start"
          exit 1
      
      - name: Run database migrations
        run: |
          docker-compose exec -T cc-pap-api python migrations/add_auto_discovery_fields.py

  # Job 2: Deploy Bouncers
  deploy-bouncers:
    name: Deploy Bouncers
    runs-on: ubuntu-latest
    needs: deploy-control-plane
    if: always()  # Run even if control-plane job was skipped (for Pro tier)
    
    strategy:
      matrix:
        bouncer:
          - name: customer-api
            port: 8080
            resource_name: "Customer API"
            resource_type: "api"
            target_host: "customer-api:8000"
            original_url: "https://api.mycompany.com"
          
          - name: admin-portal
            port: 8081
            resource_name: "Admin Portal"
            resource_type: "webapp"
            target_host: "admin-portal:3000"
            original_url: "https://admin.mycompany.com"
      
      fail-fast: false  # Continue deploying other bouncers if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy ${{ matrix.bouncer.name }} Bouncer
        run: |
          # Create bouncer-specific compose file
          cat > bouncer-${{ matrix.bouncer.name }}.yml <<EOF
          version: '3.8'
          services:
            ${{ matrix.bouncer.name }}-bouncer:
              image: controlcore/cc-bouncer:latest
              container_name: ${{ matrix.bouncer.name }}-bouncer
              ports:
                - "${{ matrix.bouncer.port }}:${{ matrix.bouncer.port }}"
              environment:
                - BOUNCER_PORT=${{ matrix.bouncer.port }}
                - TARGET_HOST=${{ matrix.bouncer.target_host }}
                - PAP_API_URL=${PAP_API_URL}
                - OPAL_SERVER_URL=${OPAL_SERVER_URL}
                - TENANT_ID=${{ env.TENANT_ID }}
                - API_KEY=${{ env.API_KEY }}
                
                # Resource Auto-Discovery
                - BOUNCER_ID=bouncer-${{ matrix.bouncer.name }}-prod
                - BOUNCER_NAME=${{ matrix.bouncer.resource_name }} Bouncer
                - BOUNCER_TYPE=reverse-proxy
                - RESOURCE_NAME=${{ matrix.bouncer.resource_name }}
                - RESOURCE_TYPE=${{ matrix.bouncer.resource_type }}
                - ORIGINAL_HOST_URL=${{ matrix.bouncer.original_url }}
                - SECURITY_POSTURE=deny-all
                - DEPLOYMENT_PLATFORM=docker
                - ENVIRONMENT=production
                
                - LOG_ENABLED=true
                - CACHE_ENABLED=true
              networks:
                - controlcore-network
          
          networks:
            controlcore-network:
              external: true
          EOF
          
          # Deploy
          docker-compose -f bouncer-${{ matrix.bouncer.name }}.yml up -d
      
      - name: Verify ${{ matrix.bouncer.name }} Bouncer
        run: |
          sleep 10
          docker logs ${{ matrix.bouncer.name }}-bouncer | grep "Successfully registered" || \
            echo "Warning: Registration message not found in logs"

  # Job 3: Verify Deployment
  verify-deployment:
    name: Verify Complete Deployment
    runs-on: ubuntu-latest
    needs: [deploy-control-plane, deploy-bouncers]
    if: always()
    
    steps:
      - name: Check all services
        run: |
          docker-compose ps
      
      - name: Verify Control Plane
        run: |
          curl -f http://localhost:8082/api/v1/health || exit 1
      
      - name: List registered resources
        run: |
          curl -s http://localhost:8082/api/v1/resources | jq
      
      - name: List registered bouncers
        run: |
          curl -s http://localhost:8082/api/v1/peps | jq
      
      - name: Send deployment notification
        if: success()
        run: |
          echo "âœ… Control Core deployed successfully!"
          echo "ðŸ“Š Control Plane: http://your-server:3000"
          echo "ðŸ”— API Docs: http://your-server:8082/docs"

# Configuration Secrets Required:
# 
# Repository Secrets (Settings â†’ Secrets â†’ Actions):
#   CONTROLCORE_TENANT_ID - Your tenant ID
#   CONTROLCORE_API_KEY - Your API key
#   DOCKER_USERNAME - Docker registry username
#   DOCKER_PASSWORD - Docker registry password
# 
# Repository Variables (Settings â†’ Variables):
#   DEPLOYMENT_TIER - kickstart, pro, or custom
#   PAP_API_URL - Control Plane URL (Pro: hosted URL, others: http://cc-pap-api:8082)
#   OPAL_SERVER_URL - OPAL URL (Pro: hosted URL, others: http://cc-opal:7000)

