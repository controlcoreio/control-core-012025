{
  "version": "1.0.0",
  "summary": "HIPAA Healthcare Privacy Policy Ensures compliance with HIPAA healthcare privacy requirements Default deny",
  "detailed_description": "This policy template implements Hipaa Healthcare Privacy controls for Compliance. It provides comprehensive authorization and governance capabilities with real-time policy evaluation. \n\nThe policy evaluates 11 different conditions including user attributes, resource properties, and contextual information. Policy decisions are made dynamically based on the current state of the system, user context, and resource characteristics. \n\nKey capabilities:\n- Real-time authorization decisions with sub-millisecond evaluation\n- Comprehensive audit logging for all policy evaluations\n- Dynamic context enrichment from multiple data sources\n- Fine-grained attribute-based access control (ABAC)\n- Support for both allow and deny rules with conflict resolution\n\n\nThis template is designed to be deployed in Control Core's policy engine and can be customized to meet your specific requirements. It follows best practices for policy authoring and includes comprehensive error handling.",
  "use_cases": [
    {
      "title": "Mayo Clinic: HIPAA Controls for Patient Records",
      "description": "US hospital implementing HIPAA Privacy and Security Rules",
      "scenario": "Mayo Clinic (70,000 employees, 1.3M patients) implements HIPAA: Minimum necessary access (doctors see full records, billing sees only CPT codes), patient authorization tracking, business associate agreements (vendors accessing PHI), breach notification (500+ records to HHS). OCR audit: Zero findings, strong HIPAA program."
    },
    {
      "title": "Kaiser Permanente: HIPAA for Integrated Healthcare System",
      "description": "Healthcare org with hospitals, clinics, insurance implementing HIPAA",
      "scenario": "Kaiser (12M members) manages PHI across care delivery and insurance: Information barriers (claims adjusters cannot see clinical notes without authorization), patient rights (access, amendment, accounting of disclosures), minimum necessary for care coordination. HIPAA compliance: Zero breaches >500 records in 2024, strong patient privacy program."
    },
    {
      "title": "Epic Systems: EHR Vendor HIPAA Business Associate",
      "description": "Healthcare IT vendor processing PHI for 250M US patients",
      "scenario": "Epic (EHR vendor) operates as HIPAA Business Associate for 300 hospitals. Controls: BAAs with all covered entities, subcontractor management, security controls (encryption, access controls, audit logs), breach notification to covered entities. HIPAA compliance: Annual security assessment, zero significant breaches, strong BA compliance program."
    }
  ],
  "conditions": [
    {
      "name": "resource.patient_id",
      "type": "string",
      "description": "Resource attribute 'patient_id' - identifies or describes the resource being accessed. This helps determine if the resource characteristics match policy requirements.",
      "required": true,
      "data_sources": [
        {
          "name": "Resource Registry or Catalog",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Metadata",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "API Gateway Configuration",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'resource.patient_id' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'resource.patient_id' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'resource.patient_id':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'resource.patient_id' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "resource456"
    },
    {
      "name": "resource.phi",
      "type": "object",
      "description": "Resource attribute 'phi' - identifies or describes the resource being accessed. This helps determine if the resource characteristics match policy requirements.",
      "required": true,
      "data_sources": [
        {
          "name": "Resource Registry or Catalog",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Metadata",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "API Gateway Configuration",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'resource.phi' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'resource.phi' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'resource.phi':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'resource.phi' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"resource456\", \"type\": \"document\", \"owner\": \"user123\"}"
    },
    {
      "name": "storage.access_controlled",
      "type": "string",
      "description": "The 'storage.access_controlled' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'storage.access_controlled' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'storage.access_controlled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'storage.access_controlled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'storage.access_controlled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "transmission.encrypted",
      "type": "string",
      "description": "The 'transmission.encrypted' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'transmission.encrypted' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'transmission.encrypted' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'transmission.encrypted':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'transmission.encrypted' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "user.baa_signed",
      "type": "object",
      "description": "User attribute 'baa_signed' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.baa_signed' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.baa_signed' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.baa_signed':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.baa_signed' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.hipaa",
      "type": "object",
      "description": "User attribute 'consent.hipaa' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.hipaa' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.hipaa' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.hipaa':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.hipaa' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.hipaa_authorized",
      "type": "object",
      "description": "User attribute 'hipaa_authorized' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.hipaa_authorized' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.hipaa_authorized' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.hipaa_authorized':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.hipaa_authorized' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.hipaa_trained",
      "type": "object",
      "description": "User attribute 'hipaa_trained' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.hipaa_trained' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.hipaa_trained' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.hipaa_trained':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.hipaa_trained' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.minimum_necessary",
      "type": "object",
      "description": "User attribute 'minimum_necessary' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.minimum_necessary' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.minimum_necessary' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.minimum_necessary':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.minimum_necessary' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.patient_id",
      "type": "string",
      "description": "User attribute 'patient_id' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.patient_id' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.patient_id' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.patient_id':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.patient_id' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "user.role",
      "type": "object",
      "description": "User attribute 'role' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Role-Based Access Control (RBAC) System",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.role' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "The job role or function of the person making the request (e.g., 'Manager', 'Analyst', 'Admin'). Used to enforce role-based access controls ensuring users only access data appropriate for their job function.",
      "how_to_fetch": "Configure Control Core to fetch 'user.role':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.role' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "Manager",
        "Senior Analyst",
        "Junior Developer",
        "Executive",
        "Contractor"
      ],
      "example_value": "{\"roles\": [\"user\", \"editor\"], \"primary_role\": \"user\"}"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "identity_and_access": [
        {
          "condition": "input.user.baa_signed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.baa_signed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.hipaa",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.hipaa",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.hipaa_authorized",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.hipaa_authorized",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.hipaa_trained",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.hipaa_trained",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.minimum_necessary",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.minimum_necessary",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.patient_id",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.patient_id",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.role",
          "system": "Okta",
          "api_endpoint": "GET /api/v1/users/{userId}/roles",
          "field_mapping": "type",
          "integration_method": "REST API",
          "setup_notes": "Configure custom user attributes in Okta profile",
          "documentation": ""
        },
        {
          "condition": "input.user.role",
          "system": "Azure AD",
          "api_endpoint": "GET /v1.0/users/{userId}/appRoleAssignments",
          "field_mapping": "appRoleId",
          "integration_method": "REST API",
          "setup_notes": "Define app roles in Azure AD app registration",
          "documentation": ""
        },
        {
          "condition": "input.user.role",
          "system": "Auth0",
          "api_endpoint": "GET /api/v2/users/{userId}/roles",
          "field_mapping": "name",
          "integration_method": "REST API",
          "setup_notes": "Create roles in Auth0 dashboard",
          "documentation": ""
        },
        {
          "condition": "input.user.role",
          "system": "Custom RBAC Database",
          "api_endpoint": "SELECT role FROM user_roles WHERE user_id = ?",
          "field_mapping": "role",
          "integration_method": "REST API",
          "setup_notes": "Expose REST API endpoint for role lookup",
          "documentation": ""
        }
      ],
      "data_sources": [
        {
          "condition": "input.resource.patient_id",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.patient_id",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.resource.phi",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.phi",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.storage.access_controlled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "storage.access_controlled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.transmission.encrypted",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "transmission.encrypted",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "Auth0",
      "Azure AD",
      "Custom RBAC Database",
      "Custom data source",
      "Okta"
    ],
    "complexity_score": "Medium - Moderate complexity requiring multiple integrations"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and ensure all prerequisites are met",
      "2. Configure data sources and integrations in Control Core",
      "3. Map required attributes (11 conditions identified) to your data sources",
      "4. Deploy policy to Sandbox environment using Control Core Admin UI",
      "5. Configure test users, resources, and scenarios in Sandbox",
      "6. Run comprehensive tests with various authorization scenarios",
      "7. Monitor policy evaluation logs and adjust conditions as needed",
      "8. Validate audit logging and compliance reporting",
      "9. Conduct user acceptance testing with stakeholders",
      "10. Promote to Production with gradual rollout (shadow mode, then enforcement)",
      "11. Set up monitoring alerts for policy violations and errors",
      "12. Document policy configuration and operational procedures"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • User with all required attributes → ALLOW",
      "      • User missing required attribute → DENY",
      "      • User with insufficient privileges → DENY",
      "      • Resource with correct classification → ALLOW",
      "      • Resource marked as restricted → DENY for non-owners",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "configuration_tips": [
      "Start with permissive policies and gradually tighten restrictions",
      "Use policy versioning to track changes and enable rollbacks",
      "Implement comprehensive logging before enforcement",
      "Test in shadow mode to observe behavior without blocking access",
      "Document all customizations and environment-specific settings",
      "Set up monitoring dashboards for policy metrics",
      "Create runbooks for common policy-related incidents",
      "Establish a policy review and update schedule"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "troubleshooting": [
      "Check Control Core logs if policy evaluation fails",
      "Verify all required attributes are available in request context",
      "Ensure data source integrations are healthy and responsive",
      "Review audit logs to understand policy decisions",
      "Use Control Core's policy testing tools to debug conditions",
      "Check for network connectivity issues between PEP and PDP",
      "Verify policy syntax and structure using validator",
      "Contact Control Core support for persistent issues"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 11 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Identity And Access:",
      "   • Configure Custom data source integration for 'input.user.baa_signed'",
      "     - API: REST API endpoint",
      "     - Field: user.baa_signed",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.consent.hipaa'",
      "     - API: REST API endpoint",
      "     - Field: user.consent.hipaa",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.hipaa_authorized'",
      "     - API: REST API endpoint",
      "     - Field: user.hipaa_authorized",
      "     - Method: REST API",
      "\n📦 Data Sources:",
      "   • Configure Custom data source integration for 'input.resource.patient_id'",
      "     - API: REST API endpoint",
      "     - Field: resource.patient_id",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.resource.phi'",
      "     - API: REST API endpoint",
      "     - Field: resource.phi",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.storage.access_controlled'",
      "     - API: REST API endpoint",
      "     - Field: storage.access_controlled",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • User conditions (7): user.baa_signed, user.consent.hipaa, user.hipaa_authorized",
      "   • Resource conditions (2): resource.patient_id, resource.phi",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.resource.patient_id' - track null/missing values",
      "     2. Monitor 'input.resource.phi' - track null/missing values",
      "     3. Monitor 'input.storage.access_controlled' - track null/missing values",
      "     4. Monitor 'input.transmission.encrypted' - track null/missing values",
      "     5. Monitor 'input.user.baa_signed' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "HIPAA Privacy Rule",
    "45 CFR Part 164 Subpart E",
    "HITECH Act",
    "HHS Privacy Rule Summary"
  ],
  "risk_level": "critical",
  "tags": [
    "privacy",
    "compliance",
    "healthcare",
    "audit-logging",
    "encryption",
    "hipaa",
    "rbac"
  ],
  "related_templates": [
    "audit-logging-retention",
    "gdpr-data-protection",
    "sox-compliance-controls"
  ],
  "conditions_analysis": {
    "total_conditions": 11,
    "user_attributes": 7,
    "resource_attributes": 2,
    "context_attributes": 0
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.user.baa_signed",
          "input.user.consent.hipaa",
          "input.user.hipaa_authorized",
          "input.user.hipaa_trained",
          "input.user.minimum_necessary",
          "input.user.patient_id",
          "input.resource.patient_id",
          "input.resource.phi",
          "input.storage.access_controlled",
          "input.transmission.encrypted"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 10 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: user.baa_signed, user.consent.hipaa, user.hipaa_authorized"
      },
      {
        "system": "Okta",
        "attributes_needed": [
          "input.user.role"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Okta",
          "2. Test API access: GET /api/v1/users/{userId}/roles",
          "3. In Control Core: Settings → Integrations → Add Okta",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: type"
      },
      {
        "system": "Azure AD",
        "attributes_needed": [
          "input.user.role"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Azure AD",
          "2. Test API access: GET /v1.0/users/{userId}/appRoleAssignments",
          "3. In Control Core: Settings → Integrations → Add Azure AD",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: appRoleId"
      },
      {
        "system": "Auth0",
        "attributes_needed": [
          "input.user.role"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Auth0",
          "2. Test API access: GET /api/v2/users/{userId}/roles",
          "3. In Control Core: Settings → Integrations → Add Auth0",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: name"
      },
      {
        "system": "Custom RBAC Database",
        "attributes_needed": [
          "input.user.role"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom RBAC Database",
          "2. Test API access: SELECT role FROM user_roles WHERE user_id = ?",
          "3. In Control Core: Settings → Integrations → Add Custom RBAC Database",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: role"
      }
    ]
  }
}