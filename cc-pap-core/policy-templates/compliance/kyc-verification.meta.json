{
  "version": "1.0.0",
  "summary": "KYC (Know Your Customer) verification requirements for Canadian financial institutions under FINTRAC and OSFI guidelines",
  "detailed_description": "This policy template enforces Know Your Customer (KYC) verification requirements for Canadian financial institutions under FINTRAC's PCMLTFA obligations and OSFI risk management expectations. KYC is the foundation of anti-money laundering programs, requiring financial institutions to verify customer identity, understand the nature and purpose of the business relationship, and conduct ongoing monitoring. The policy enforces identity verification (government-issued photo ID), address verification (utility bill, bank statement), risk assessment completion, enhanced due diligence for high-risk customers (PEPs, high-risk jurisdictions, cash-intensive businesses), source of funds/wealth verification for high-risk relationships, beneficial ownership identification for corporate clients (25% threshold per FINTRAC), senior management approval for PEP relationships, and ongoing KYC reviews (annually for high-risk, every 3 years for low-risk). Supports banks, credit unions, money services businesses, securities dealers, and life insurance companies in meeting customer due diligence obligations while enabling efficient digital onboarding and risk-based approaches.",
  "use_cases": [
    {
      "title": "TD Bank: Personal Banking KYC Verification",
      "description": "Deploy kyc-verification for retail customer onboarding at scale",
      "scenario": "TD onboards 500K new retail banking customers annually (1,400/day average). FINTRAC KYC requirements: Government-issued photo ID verification, address verification, occupation/business verification for risk assessment. Process: Branch: Customer presents ID (driver's license, passport), photocopied and verified by teller, address confirmed via utility bill or bank statement, risk assessment questionnaire (occupation, income source, expected account activity). Digital: ID photo uploaded, facial recognition verification, address verified electronically (credit bureau), risk assessment automated based on occupation database. Policy enforces: Account cannot be opened until all KYC elements completed, high-risk occupations flagged for enhanced review (money services business, foreign exchange dealer, cannabis retailer), non-resident Canadians require enhanced documentation. Results: Branch onboarding 25 minutes average (includes KYC), digital onboarding 5 minutes (90% straight-through processing), 10% flagged for manual review (ID verification failure, high-risk occupation). FINTRAC examination: Strong KYC procedures, appropriate risk-based approach, 100% customer identity verification compliance."
    },
    {
      "title": "Wealthsimple: Fully Digital KYC with AI-Powered Verification",
      "description": "Implement kyc-verification for mobile-first fintech onboarding",
      "scenario": "Wealthsimple (3M customers) implements AI-powered KYC for instant account opening. Technology stack: Government ID photo capture (mobile camera), facial recognition biometric verification (customer selfie vs. ID photo - 99.2% accuracy), document authenticity check (watermark detection, font analysis, ID template validation), liveness detection (customer blinks/moves head to prevent photo spoofing), automated address verification (Equifax/TransUnion electronic validation or utility bill OCR). Processing: Customer completes KYC in 3 minutes on mobile, 85% auto-approved instantly, 15% require manual review (ID authentication failed, address cannot be verified electronically, high-risk occupation detected). Fraud prevention: AI blocks 5,000 fake ID attempts annually (stolen IDs, photoshopped documents, printed photos for facial recognition), saves $15M potential fraud losses. Customer experience: NPS 85 for onboarding (instant account opening appreciated), 15% requiring manual review wait average 4 hours (acceptable). FINTRAC compliance: 100% identity verification, regulator accepted AI verification as meeting requirements (equivalent to in-person verification), praised as fintech innovation with strong controls."
    },
    {
      "title": "CIBC: Corporate Customer KYC and Beneficial Ownership",
      "description": "Use kyc-verification for business account onboarding",
      "scenario": "CIBC business banking onboards 10,000 corporate accounts annually (small businesses to multinational subsidiaries). FINTRAC corporate KYC: Verify corporation exists (government registry search), identify beneficial owners (≥25% ownership), verify beneficial owner identities, identify control persons (CEO, directors), understand business purpose. Process complexity tiers: Tier 1 Simple (sole proprietor, single shareholder corp): 1-day approval, basic KYC. Tier 2 Standard (2-5 shareholders, Canadian ownership): 3-day approval, beneficial ownership verification. Tier 3 Complex (foreign ownership, multi-layer structures, trusts as shareholders): 2-week approval, enhanced investigation. Example complex: Real estate developer with 10-layer ownership through multiple jurisdictions requiring ownership chart, corporate documents from 5 countries, verification of 7 beneficial owners across Canada/USA/China. Policy enforces: Corporate account blocked until beneficial ownership identified, each ≥25% owner verified with government ID, control person determination, complex structures require ownership chart with compliance approval. Results: 90% of accounts Tier 1/2 (smooth processing), 10% Tier 3 (resource-intensive), 98% beneficial ownership identification rate (2% declined - unable/unwilling to provide beneficial ownership). FINTRAC examination: Strong corporate KYC with appropriate tiering, good balance of efficiency and thoroughness."
    },
    {
      "title": "Questrade: Enhanced KYC for Investment Accounts",
      "description": "Deploy kyc-verification for IIROC Know-Your-Client requirements",
      "scenario": "Questrade (IIROC dealer) performs enhanced KYC for investment accounts beyond basic FINTRAC identity verification. IIROC KYC requirements: Investment knowledge assessment, risk tolerance, investment objectives, time horizon, financial situation (income, net worth, liquidity needs). Enhanced for suitability: Cannot recommend unsuitable investments (day trading for conservative investor, options for novice). Policy enforces: All KYC suitability questions must be answered before account activation, investment knowledge score calculated (novice, intermediate, advanced), product access restricted based on knowledge (options require advanced knowledge, leveraged products require suitable risk tolerance), annual KYC update required (customer re-confirms financial situation, risk tolerance). Suitability enforcement: Customer attempts to buy complex product (3x leveraged ETF), system checks KYC (risk tolerance: conservative), product blocked with message 'This product is not suitable based on your risk tolerance. Contact advisor for review'. Advisor override: Can approve after discussion documenting customer understanding of risks. Results: 300K customers, 100% KYC completion, product restrictions prevent 5,000 unsuitable trades annually (customer protection), 500 advisor overrides (sophisticated customers wanting aggressive strategies). IIROC examination: Strong suitability controls, good investor protection, appropriate use of technology for KYC enforcement."
    },
    {
      "title": "EQ Bank: Ongoing KYC Reviews and Customer Due Diligence Updates",
      "description": "Apply kyc-verification for continuous customer due diligence",
      "scenario": "EQ Bank (300K customers) implements risk-based ongoing KYC review schedules per FINTRAC guidance. Review frequency: Low risk (85% of customers): KYC refresh every 3 years (identity re-verified, address updated, risk re-assessed), Medium risk (12%): Biennial review, High risk (3%): Annual review with enhanced documentation. Triggers for immediate re-KYC: Customer risk level increases (transaction patterns change), customer becomes PEP (enters politics, appointed to government), adverse media (customer involved in news for financial crime), material change in account activity. Automation: Automated KYC review scheduling (customer receives email 30 days before due, reminder at 15 days, account restrictions if 30 days overdue), electronic document upload (address verification via mobile app), risk re-assessment automated (transaction pattern analysis vs. original expected activity). Results: 95% of customers complete KYC renewal within 30 days (proactive notifications effective), 5% require account restrictions (cannot make large transfers until KYC updated), 100% KYC currency maintained (no customers with outdated KYC >3 years). FINTRAC examination: Well-designed ongoing KYC program with risk-based approach, good customer communication, strong compliance monitoring."
    },
    {
      "title": "Tangerine: Non-Resident Customer Enhanced KYC",
      "description": "Implement kyc-verification for non-resident Canadian account holders",
      "scenario": "Tangerine serves 50,000 non-resident Canadians (snowbirds living part-year in USA/Mexico, expatriates, foreign students). FINTRAC non-resident risk: Higher money laundering risk (cross-border funds movement, multiple jurisdictions), enhanced due diligence required. Policy enforces: Non-resident flag triggers enhanced KYC workflow, Canadian address AND foreign address required, source of funds verification mandatory (employment letter, investment statements), purpose of Canadian account documented (maintaining Canadian ties, property ownership, family support), enhanced monitoring (all international transfers reviewed). Scenarios: Canadian snowbird in Florida (low risk - retirement income from Canada, seasonal funds movement - approved with standard monitoring), Foreign student from China (medium risk - tuition payments, parental support verified - approved with quarterly review), Expatriate in UAE (high risk - Middle East jurisdiction, large transfers - approved with monthly monitoring + senior approval). Results: 50K non-resident accounts, appropriate risk-based treatment (not discriminatory but risk-aware), zero FINTRAC violations for non-resident KYC, customer satisfaction 82% (understand enhanced requirements for non-resident status). FINTRAC: Good non-resident risk management with appropriate enhanced measures."
    }
  ],
  "conditions": [
    {
      "name": "action",
      "type": "string",
      "description": "The action attribute used in policy evaluation.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'action' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'action' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'action':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'action' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "read"
    },
    {
      "name": "context.address_verified",
      "type": "object",
      "description": "Context attribute 'address_verified' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.address_verified' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.address_verified' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.address_verified':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.address_verified' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.beneficial_ownership_verified",
      "type": "object",
      "description": "Context attribute 'beneficial_ownership_verified' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "GeoIP Databases",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.beneficial_ownership_verified' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.beneficial_ownership_verified' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.beneficial_ownership_verified':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.beneficial_ownership_verified' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.corporate_documents_verified",
      "type": "object",
      "description": "Context attribute 'corporate_documents_verified' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.corporate_documents_verified' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.corporate_documents_verified' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.corporate_documents_verified':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.corporate_documents_verified' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.customer_risk_level",
      "type": "integer",
      "description": "Context attribute 'customer_risk_level' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.customer_risk_level' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.customer_risk_level' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.customer_risk_level':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.customer_risk_level' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "5"
    },
    {
      "name": "context.customer_type",
      "type": "object",
      "description": "Context attribute 'customer_type' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.customer_type' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.customer_type' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.customer_type':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.customer_type' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"type\": \"enterprise\", \"tier\": \"premium\", \"risk_level\": \"low\"}"
    },
    {
      "name": "context.enhanced_kyc_completed",
      "type": "object",
      "description": "Context attribute 'enhanced_kyc_completed' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.enhanced_kyc_completed' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.enhanced_kyc_completed' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.enhanced_kyc_completed':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.enhanced_kyc_completed' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.enhanced_monitoring_enabled",
      "type": "boolean",
      "description": "Context attribute 'enhanced_monitoring_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.enhanced_monitoring_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.enhanced_monitoring_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.enhanced_monitoring_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.enhanced_monitoring_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.identity_verified",
      "type": "string",
      "description": "Context attribute 'identity_verified' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.identity_verified' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.identity_verified' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.identity_verified':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.identity_verified' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "context.kyc_documents_provided",
      "type": "string",
      "description": "Context attribute 'kyc_documents_provided' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.kyc_documents_provided' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.kyc_documents_provided' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.kyc_documents_provided':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.kyc_documents_provided' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "context.kyc_review_due",
      "type": "object",
      "description": "Context attribute 'kyc_review_due' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.kyc_review_due' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.kyc_review_due' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.kyc_review_due':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.kyc_review_due' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.kyc_risk_assessment_completed",
      "type": "object",
      "description": "Context attribute 'kyc_risk_assessment_completed' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.kyc_risk_assessment_completed' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.kyc_risk_assessment_completed' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.kyc_risk_assessment_completed':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.kyc_risk_assessment_completed' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"level\": \"medium\", \"score\": 5, \"factors\": [\"location\", \"time\"]}"
    },
    {
      "name": "context.pep_approval_obtained",
      "type": "object",
      "description": "Context attribute 'pep_approval_obtained' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.pep_approval_obtained' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.pep_approval_obtained' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.pep_approval_obtained':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.pep_approval_obtained' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.senior_management_approval",
      "type": "object",
      "description": "Context attribute 'senior_management_approval' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.senior_management_approval' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.senior_management_approval' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.senior_management_approval':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.senior_management_approval' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.source_of_funds_verified",
      "type": "object",
      "description": "Context attribute 'source_of_funds_verified' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.source_of_funds_verified' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.source_of_funds_verified' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.source_of_funds_verified':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.source_of_funds_verified' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.address_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.address_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.corporate_documents_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.corporate_documents_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.customer_type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.customer_type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.enhanced_kyc_completed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.enhanced_kyc_completed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.enhanced_monitoring_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.enhanced_monitoring_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.identity_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.identity_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.kyc_documents_provided",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.kyc_documents_provided",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.kyc_review_due",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.kyc_review_due",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.pep_approval_obtained",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.pep_approval_obtained",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.senior_management_approval",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.senior_management_approval",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.source_of_funds_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.source_of_funds_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.ubo_kyc_completed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.ubo_kyc_completed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.resource.type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "infrastructure": [
        {
          "condition": "input.context.beneficial_ownership_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.beneficial_ownership_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "monitoring_and_logging": [
        {
          "condition": "input.context.customer_risk_level",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.customer_risk_level",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.kyc_risk_assessment_completed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.kyc_risk_assessment_completed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "High - Complex policy with many conditions and data sources"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and ensure all prerequisites are met",
      "2. Configure data sources and integrations in Control Core",
      "3. Map required attributes (17 conditions identified) to your data sources",
      "4. Deploy policy to Sandbox environment using Control Core Admin UI",
      "5. Configure test users, resources, and scenarios in Sandbox",
      "6. Run comprehensive tests with various authorization scenarios",
      "7. Monitor policy evaluation logs and adjust conditions as needed",
      "8. Validate audit logging and compliance reporting",
      "9. Conduct user acceptance testing with stakeholders",
      "10. Promote to Production with gradual rollout (shadow mode, then enforcement)",
      "11. Set up monitoring alerts for policy violations and errors",
      "12. Document policy configuration and operational procedures"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • Resource with correct classification → ALLOW",
      "      • Resource marked as restricted → DENY for non-owners",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "configuration_tips": [
      "Start with permissive policies and gradually tighten restrictions",
      "Use policy versioning to track changes and enable rollbacks",
      "Implement comprehensive logging before enforcement",
      "Test in shadow mode to observe behavior without blocking access",
      "Document all customizations and environment-specific settings",
      "Set up monitoring dashboards for policy metrics",
      "Create runbooks for common policy-related incidents",
      "Establish a policy review and update schedule"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "troubleshooting": [
      "Check Control Core logs if policy evaluation fails",
      "Verify all required attributes are available in request context",
      "Ensure data source integrations are healthy and responsive",
      "Review audit logs to understand policy decisions",
      "Use Control Core's policy testing tools to debug conditions",
      "Check for network connectivity issues between PEP and PDP",
      "Verify policy syntax and structure using validator",
      "Contact Control Core support for persistent issues"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 17 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.address_verified'",
      "     - API: REST API endpoint",
      "     - Field: context.address_verified",
      "     - Method: REST API",
      "\n📦 Infrastructure:",
      "   • Configure Custom data source integration for 'input.context.beneficial_ownership_verified'",
      "     - API: REST API endpoint",
      "     - Field: context.beneficial_ownership_verified",
      "     - Method: REST API",
      "\n📦 Monitoring And Logging:",
      "   • Configure Custom data source integration for 'input.context.customer_risk_level'",
      "     - API: REST API endpoint",
      "     - Field: context.customer_risk_level",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.kyc_risk_assessment_completed'",
      "     - API: REST API endpoint",
      "     - Field: context.kyc_risk_assessment_completed",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • Resource conditions (1): resource.type",
      "   • Context conditions (15): context.address_verified, context.beneficial_ownership_verified, context.corporate_documents_verified",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.address_verified' - track null/missing values",
      "     3. Monitor 'input.context.beneficial_ownership_verified' - track null/missing values",
      "     4. Monitor 'input.context.corporate_documents_verified' - track null/missing values",
      "     5. Monitor 'input.context.customer_risk_level' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "FINTRAC",
    "PCMLTFA (Customer Due Diligence Requirements)",
    "FATF Recommendation 10 (Customer Due Diligence)",
    "IIROC (Know-Your-Client for Investment Dealers)",
    "OSFI E-21 (Third-Party Risk - KYC for vendors)"
  ],
  "risk_level": "critical",
  "tags": [
    "verification",
    "rbac",
    "compliance",
    "monitoring"
  ],
  "related_templates": [
    "audit-logging-retention",
    "gdpr-data-protection",
    "sox-compliance-controls",
    "hipaa-healthcare-privacy"
  ],
  "conditions_analysis": {
    "total_conditions": 17,
    "user_attributes": 0,
    "resource_attributes": 1,
    "context_attributes": 15
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete"
      },
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.context.address_verified",
          "input.context.corporate_documents_verified",
          "input.context.customer_type",
          "input.context.enhanced_kyc_completed",
          "input.context.enhanced_monitoring_enabled",
          "input.context.identity_verified",
          "input.context.kyc_documents_provided",
          "input.context.kyc_review_due",
          "input.context.pep_approval_obtained",
          "input.context.senior_management_approval",
          "input.context.source_of_funds_verified",
          "input.context.ubo_kyc_completed",
          "input.resource.type",
          "input.context.beneficial_ownership_verified",
          "input.context.customer_risk_level",
          "input.context.kyc_risk_assessment_completed"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 16 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: context.address_verified, context.corporate_documents_verified, context.customer_type"
      }
    ]
  }
}