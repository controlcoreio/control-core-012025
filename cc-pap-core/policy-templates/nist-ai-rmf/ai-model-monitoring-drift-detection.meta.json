{
  "version": "1.0.0",
  "summary": "Continuous monitoring and drift detection policy for AI/ML models aligned with NIST AI RMF",
  "detailed_description": "This policy implements comprehensive continuous monitoring for AI/ML models to detect and respond to data drift, concept drift, and performance degradation. It tracks multiple performance metrics (accuracy, precision, recall, F1-score, AUC-ROC) and compares them against established baselines. The policy detects three types of drift: data drift (input distribution changes), concept drift (input-output relationship changes), and performance drift (model accuracy degradation).\n\nKey features:\n- Real-time drift detection across multiple dimensions\n- Weighted drift scoring (data 35%, concept 35%, performance 30%)\n- Five-level severity classification (none, low, medium, high, critical)\n- Automated alert management and acknowledgment tracking\n- Retraining schedule enforcement\n- Performance threshold validation\n- Baseline comparison and trend analysis",
  "use_cases": [
    {
      "title": "Financial Services: AI-Powered Fraud Detection System",
      "description": "Deploy ai-model-monitoring-drift-detection.meta for a production fraud detection AI model",
      "scenario": "Global Bank deploys an AI fraud detection model processing 10M daily transactions. Auditor requirement: demonstrate model approval process, training data governance, and bias testing before production deployment. Policy enforces: (1) Risk assessment by Chief AI Officer, (2) Validation by independent team showing <2% false positive rate, (3) Monthly bias audits on protected classes, (4) Automated rollback if accuracy drops below 95%. Compliance: Federal Reserve SR 11-7 (Model Risk Management)."
    },
    {
      "title": "Healthcare: Clinical Decision Support AI with HIPAA Requirements",
      "description": "Apply ai-model-monitoring-drift-detection.meta to protect patient data in AI diagnostic systems",
      "scenario": "Hospital network implements AI radiology assistant analyzing 5,000 X-rays daily. Auditor verification needed: (1) All 47 radiologists have signed AI use agreements, (2) System logs every AI recommendation with radiologist override capability, (3) PHI access restricted to treating physicians only, (4) AI outputs reviewed by second physician for high-stakes diagnoses. Policy blocks: AI access outside treating relationship, automated AI decisions without physician review. HIPAA audit trail maintained for 6 years."
    },
    {
      "title": "Retail: Customer Service AI with PII Protection",
      "description": "Implement ai-model-monitoring-drift-detection.meta for AI chatbot handling customer data",
      "scenario": "E-commerce platform's AI chatbot handles 50,000 daily customer interactions across EU and California. Compliance requirement: Demonstrate GDPR Article 22 (right to object to automated decisions) and CCPA compliance. Policy enforces: (1) Customer PII (SSN, payment details) masked in AI training data, (2) Chatbot unable to make purchase decisions >$500 without human, (3) EU customers can request human agent immediately, (4) All AI interactions logged with 'automated decision' flag. Reduced compliance violations from 12/month to zero."
    },
    {
      "title": "Insurance: Automated Underwriting with Fairness Requirements",
      "description": "Use ai-model-monitoring-drift-detection.meta to ensure fair AI-driven insurance decisions",
      "scenario": "Insurance carrier uses AI to evaluate 15,000 policy applications monthly. State regulator audit focuses on: (1) Proving AI doesn't discriminate on race, gender (protected classes), (2) Demonstrating explainability for all denials, (3) Human review for borderline cases. Policy requires: Bias testing quarterly across 50+ demographic segments, explainability scores >0.7, senior underwriter review when AI confidence <85%. Result: Zero discrimination findings in regulatory exam, 23% faster application processing."
    },
    {
      "title": "Manufacturing: Predictive Maintenance AI with Safety Controls",
      "description": "Deploy ai-model-monitoring-drift-detection.meta for safety-critical industrial AI systems",
      "scenario": "Auto manufacturer uses AI to predict equipment failures affecting 1,200 assembly robots. Safety audit requirements: (1) Prove AI trained only on verified sensor data, (2) Human override always available, (3) False negatives (missed failures) tracked and investigated, (4) AI recommendations reviewed by maintenance engineers before critical shutdowns. Policy enforces: 2-person approval for shutdowns affecting >50 workers, AI confidence thresholds before automated actions, incident tracking for all prediction failures."
    },
    {
      "title": "Government: AI in Public Services with Transparency Requirements",
      "description": "Apply ai-model-monitoring-drift-detection.meta for government AI systems requiring public accountability",
      "scenario": "City government deploys AI for permit application processing (5,000/month). Public accountability requirements: (1) AI decision criteria published publicly, (2) Citizens can request human review within 5 business days, (3) Bias audits by independent third party annually, (4) Algorithmic Impact Assessment published. Policy ensures: All denials include explanation in plain language, applicant notification of AI use, appeals tracked with resolution times, bias metrics published quarterly."
    }
  ],
  "conditions": [
    {
      "name": "ai_model.monitoring",
      "type": "object",
      "description": "Monitoring configuration and status",
      "required": true,
      "fields": [
        "enabled",
        "metrics_tracked",
        "frequency_minutes"
      ],
      "plain_english": "Runtime evaluation of 'ai_model.monitoring' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'ai_model.monitoring':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'ai_model.monitoring' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"key\": \"value\"}"
    },
    {
      "name": "ai_model.metrics",
      "type": "object",
      "description": "Drift metrics and scores",
      "required": true,
      "metrics": {
        "data_drift_score": "Input distribution change score (0-1)",
        "concept_drift_score": "Input-output relationship change score (0-1)",
        "performance_drift_score": "Model accuracy degradation score (0-1)"
      },
      "plain_english": "Runtime evaluation of 'ai_model.metrics' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'ai_model.metrics':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'ai_model.metrics' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"key\": \"value\"}"
    },
    {
      "name": "ai_model.current_performance",
      "type": "object",
      "description": "Current model performance metrics",
      "required": true,
      "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1_score",
        "auc_roc"
      ],
      "plain_english": "Runtime evaluation of 'ai_model.current_performance' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'ai_model.current_performance':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'ai_model.current_performance' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"key\": \"value\"}"
    },
    {
      "name": "ai_model.baseline",
      "type": "object",
      "description": "Baseline metrics for comparison",
      "required": true,
      "fields": [
        "established",
        "metrics",
        "date"
      ],
      "plain_english": "Runtime evaluation of 'ai_model.baseline' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'ai_model.baseline':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'ai_model.baseline' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"key\": \"value\"}"
    },
    {
      "name": "ai_model.alerts",
      "type": "object",
      "description": "Alert status and acknowledgments",
      "required": true,
      "fields": [
        "pending_count",
        "critical_unacknowledged_count",
        "oldest_unacknowledged_hours"
      ],
      "plain_english": "Runtime evaluation of 'ai_model.alerts' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'ai_model.alerts':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'ai_model.alerts' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"key\": \"value\"}"
    },
    {
      "name": "ai_model.retraining",
      "type": "object",
      "description": "Retraining schedule and history",
      "required": true,
      "fields": [
        "scheduled",
        "last_retrain_date",
        "max_days_between_retraining"
      ],
      "plain_english": "Runtime evaluation of 'ai_model.retraining' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'ai_model.retraining':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'ai_model.retraining' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"key\": \"value\"}"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.environment",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "environment",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "ai_ml_platforms": [
        {
          "condition": "input.ai_model.alerts.critical_unacknowledged_count",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.alerts.critical_unacknowledged_count",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.alerts.oldest_unacknowledged_hours",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.alerts.oldest_unacknowledged_hours",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.alerts.pending_count",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.alerts.pending_count",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.baseline.established",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.baseline.established",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.baseline.metrics",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.baseline.metrics",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.current_performance",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.current_performance",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.drift_mitigation_plan.approved",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.drift_mitigation_plan.approved",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.drift_mitigation_plan.exists",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.drift_mitigation_plan.exists",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.metrics.concept_drift_score",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.metrics.concept_drift_score",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.metrics.data_drift_score",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.metrics.data_drift_score",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.metrics.performance_drift_score",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.metrics.performance_drift_score",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.monitoring.enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.monitoring.enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.monitoring.frequency_minutes",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.monitoring.frequency_minutes",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.monitoring.metrics_tracked",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.monitoring.metrics_tracked",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.retraining.last_retrain_date",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.retraining.last_retrain_date",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.retraining.max_days_between_retraining",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.retraining.max_days_between_retraining",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.ai_model.retraining.scheduled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "ai_model.retraining.scheduled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "High - Complex policy with many conditions and data sources"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Integrate with ML monitoring platform",
      "2. Establish baseline metrics for each model",
      "3. Configure drift detection thresholds",
      "4. Set up performance metric tracking",
      "5. Configure alert routing and acknowledgment workflows",
      "6. Define retraining schedules and triggers",
      "7. Deploy to sandbox with test models",
      "8. Validate drift detection with simulated scenarios",
      "9. Train ML ops team on alert response procedures",
      "10. Promote to production with full observability"
    ],
    "configuration_tips": [
      "Adjust drift thresholds based on model criticality and use case",
      "Set monitoring frequency based on prediction volume and risk",
      "Configure performance thresholds aligned with business requirements",
      "Customize alert severity levels and escalation rules",
      "Set appropriate retraining intervals based on data velocity"
    ],
    "testing_scenarios": [
      "Model with no drift - should allow normal operation",
      "Low data drift detected - should allow with monitoring",
      "High performance drift - should trigger retraining",
      "Critical drift detected - should stop predictions",
      "Unacknowledged critical alert - should require acknowledgment"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 19 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.environment'",
      "     - API: REST API endpoint",
      "     - Field: environment",
      "     - Method: REST API",
      "\n📦 Ai Ml Platforms:",
      "   • Configure Custom data source integration for 'input.ai_model.alerts.critical_unacknowledged_count'",
      "     - API: REST API endpoint",
      "     - Field: ai_model.alerts.critical_unacknowledged_count",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.ai_model.alerts.oldest_unacknowledged_hours'",
      "     - API: REST API endpoint",
      "     - Field: ai_model.alerts.oldest_unacknowledged_hours",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.ai_model.alerts.pending_count'",
      "     - API: REST API endpoint",
      "     - Field: ai_model.alerts.pending_count",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.ai_model.alerts.critical_unacknowledged_count' - track null/missing values",
      "     3. Monitor 'input.ai_model.alerts.oldest_unacknowledged_hours' - track null/missing values",
      "     4. Monitor 'input.ai_model.alerts.pending_count' - track null/missing values",
      "     5. Monitor 'input.ai_model.baseline.established' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "NIST AI RMF",
    "NIST AI 100-1",
    "ISO/IEC 23894",
    "SOC 2 Type II",
    "Model Risk Management (SR 11-7)"
  ],
  "risk_level": "high",
  "tags": [
    "nist-ai-rmf",
    "drift-detection",
    "model-monitoring",
    "performance-tracking",
    "mlops"
  ],
  "related_templates": [
    "ai-risk-assessment-classification",
    "ai-bias-detection-mitigation",
    "ai-accountability-framework"
  ],
  "conditions_analysis": {
    "total_conditions": 19,
    "user_attributes": 0,
    "resource_attributes": 0,
    "context_attributes": 0
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete"
      },
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.environment",
          "input.ai_model.alerts.critical_unacknowledged_count",
          "input.ai_model.alerts.oldest_unacknowledged_hours",
          "input.ai_model.alerts.pending_count",
          "input.ai_model.baseline.established",
          "input.ai_model.baseline.metrics",
          "input.ai_model.current_performance",
          "input.ai_model.drift_mitigation_plan.approved",
          "input.ai_model.drift_mitigation_plan.exists",
          "input.ai_model.metrics.concept_drift_score",
          "input.ai_model.metrics.data_drift_score",
          "input.ai_model.metrics.performance_drift_score",
          "input.ai_model.monitoring.enabled",
          "input.ai_model.monitoring.frequency_minutes",
          "input.ai_model.monitoring.metrics_tracked",
          "input.ai_model.retraining.last_retrain_date",
          "input.ai_model.retraining.max_days_between_retraining",
          "input.ai_model.retraining.scheduled"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 18 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: environment, ai_model.alerts.critical_unacknowledged_count, ai_model.alerts.oldest_unacknowledged_hours"
      }
    ]
  }
}