{
  "version": "1.0.0",
  "summary": "Manage user consent for data processing",
  "detailed_description": "Manage user consent for data processing. This policy provides comprehensive controls and enforcement mechanisms aligned with industry standards and best practices.",
  "use_cases": [
    {
      "title": "Spotify: GDPR for EU User Personal Data",
      "description": "Swedish company managing 240M EU subscriber data under GDPR",
      "scenario": "Spotify implements GDPR controls: Consent management (marketing opt-in), data subject rights portal (access, deletion, portability), data protection impact assessments (DPIAs for new features), Data Protection Officer. GDPR compliance: 50K data subject requests monthly (processed <30 days), zero regulatory fines, strong privacy-by-design culture."
    },
    {
      "title": "Deutsche Bank: GDPR for Financial Services",
      "description": "German bank implementing GDPR for customer data protection",
      "scenario": "Deutsche Bank (9M customers) maintains GDPR compliance: Legal basis for processing (contract, legal obligation, legitimate interest), cross-border transfer safeguards (SCCs for non-EU transfers), retention limits (deleted when purpose complete), DPIA for high-risk processing. BaFin + GDPR: Zero violations, strong data protection framework."
    },
    {
      "title": "SAP: GDPR for Enterprise Software and Customer Data",
      "description": "German software company processing EU business customer data",
      "scenario": "SAP (data processor for 400K businesses) implements GDPR: Data processing agreements (DPAs) with all customers, sub-processor management, security measures (ISO 27001, SOC 2), data breach notification (<72 hours to customers). GDPR compliance: Annual DPA renewals, zero reportable breaches, strong processor accountability."
    }
  ],
  "conditions": [
    {
      "name": "user.authenticated",
      "type": "boolean",
      "description": "User authentication status",
      "required": true,
      "plain_english": "Runtime evaluation of 'user.authenticated' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.authenticated':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.authenticated' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "user.authorized",
      "type": "boolean",
      "description": "User authorization status",
      "required": true,
      "plain_english": "Runtime evaluation of 'user.authorized' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.authorized':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.authorized' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.compliant",
      "type": "boolean",
      "description": "Compliance status",
      "required": true,
      "plain_english": "Runtime evaluation of 'context.compliant' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.compliant':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.compliant' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "identity_and_access": [
        {
          "condition": "input.user.authenticated",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.authenticated",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.authorized",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.authorized",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET‚Üíread, POST‚Üícreate, DELETE‚Üídelete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.compliant",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.compliant",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "monitoring_and_logging": [
        {
          "condition": "input.context.risk_assessed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.risk_assessed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "Medium - Moderate complexity requiring multiple integrations"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Configure integration with IAM system",
      "2. Set up audit logging",
      "3. Test in sandbox environment",
      "4. Deploy to production"
    ],
    "configuration_tips": [
      "Adjust thresholds based on risk appetite",
      "Configure notifications for policy violations"
    ],
    "testing_scenarios": [
      "Authorized user access - should allow",
      "Unauthorized user access - should deny"
    ],
    "prerequisites": [
      "‚úÖ Inventory all systems needed for 5 conditions in this policy",
      "‚úÖ Verify API access and credentials for each system",
      "‚úÖ Test API endpoints return expected data format",
      "‚úÖ Document field mappings between your systems and policy conditions",
      "‚úÖ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\nüì¶ Identity And Access:",
      "   ‚Ä¢ Configure Custom data source integration for 'input.user.authenticated'",
      "     - API: REST API endpoint",
      "     - Field: user.authenticated",
      "     - Method: REST API",
      "   ‚Ä¢ Configure Custom data source integration for 'input.user.authorized'",
      "     - API: REST API endpoint",
      "     - Field: user.authorized",
      "     - Method: REST API",
      "\nüì¶ Data Sources:",
      "   ‚Ä¢ Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   ‚Ä¢ Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET‚Üíread, POST‚Üícreate, DELETE‚Üídelete",
      "     - Method: REST API",
      "   ‚Ä¢ Configure Custom data source integration for 'input.context.compliant'",
      "     - API: REST API endpoint",
      "     - Field: context.compliant",
      "     - Method: REST API",
      "\nüì¶ Monitoring And Logging:",
      "   ‚Ä¢ Configure Custom data source integration for 'input.context.risk_assessed'",
      "     - API: REST API endpoint",
      "     - Field: context.risk_assessed",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "üîß Review and customize the following conditions for your environment:",
      "   ‚Ä¢ User conditions (2): user.authenticated, user.authorized",
      "   ‚Ä¢ Context conditions (2): context.compliant, context.risk_assessed",
      "",
      "üìù Modification guidelines:",
      "   ‚Ä¢ Update attribute names to match your system's field names",
      "   ‚Ä¢ Adjust threshold values (e.g., risk scores, time windows)",
      "   ‚Ä¢ Add/remove conditions based on your requirements",
      "   ‚Ä¢ Test each condition individually before combining",
      "",
      "üíæ Save modified policy with version tag for tracking"
    ],
    "sandbox_testing": [
      "üß™ Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      ‚Ä¢ User with all required attributes ‚Üí ALLOW",
      "      ‚Ä¢ User missing required attribute ‚Üí DENY",
      "      ‚Ä¢ User with insufficient privileges ‚Üí DENY",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "production_deployment": [
      "üöÄ Production deployment checklist:",
      "   1. ‚úÖ All sandbox tests passing",
      "   2. ‚úÖ Stakeholder approval documented",
      "   3. ‚úÖ Rollback plan prepared",
      "   4. ‚úÖ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ‚úÖ Review shadow mode logs for unexpected denials",
      "   6. ‚úÖ Adjust policy based on real traffic patterns",
      "   7. ‚úÖ Enable enforcement mode with gradual rollout (10% ‚Üí 50% ‚Üí 100%)",
      "   8. ‚úÖ Monitor error rates and user feedback",
      "   9. ‚úÖ Document deployment for compliance audit trail"
    ],
    "monitoring_setup": [
      "üìä Set up monitoring and alerts:",
      "   ‚Ä¢ Policy evaluation count (baseline: track for 1 week)",
      "   ‚Ä¢ Denial rate (alert if > 5% of requests)",
      "   ‚Ä¢ Evaluation latency (alert if > 200ms p95)",
      "   ‚Ä¢ Missing attribute errors (alert on any occurrence)",
      "   ‚Ä¢ Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.compliant' - track null/missing values",
      "     3. Monitor 'input.context.risk_assessed' - track null/missing values",
      "     4. Monitor 'input.user.authenticated' - track null/missing values",
      "     5. Monitor 'input.user.authorized' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "GDPR Article 7",
    "GDPR Recital 32",
    "ePrivacy Directive",
    "EDPB Guidelines 05/2020"
  ],
  "risk_level": "high",
  "tags": [
    "gdpr",
    "privacy-compliance"
  ],
  "related_templates": [],
  "conditions_analysis": {
    "total_conditions": 5,
    "user_attributes": 2,
    "resource_attributes": 0,
    "context_attributes": 2
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.user.authenticated",
          "input.user.authorized",
          "input.context.compliant",
          "input.context.risk_assessed"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings ‚Üí Integrations ‚Üí Add Custom data source",
          "4. Configure field mappings for 4 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: user.authenticated, user.authorized, context.compliant"
      },
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings ‚Üí Integrations ‚Üí Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings ‚Üí Integrations ‚Üí Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET‚Üíread, POST‚Üícreate, DELETE‚Üídelete"
      }
    ]
  }
}