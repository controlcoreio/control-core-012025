{
  "version": "1.0.0",
  "summary": "Policy to enforce location-based data masking for PII This policy masks sensitive data based on user location, network, and geographic restrictions Allow access by default, but apply masking rules",
  "detailed_description": "This policy template implements Data Masking Location Based controls for Pii Management. It provides comprehensive authorization and governance capabilities with real-time policy evaluation. \n\nThe policy evaluates 20 different conditions including user attributes, resource properties, and contextual information. Policy decisions are made dynamically based on the current state of the system, user context, and resource characteristics. \n\nKey capabilities:\n- Real-time authorization decisions with sub-millisecond evaluation\n- Comprehensive audit logging for all policy evaluations\n- Dynamic context enrichment from multiple data sources\n- Fine-grained attribute-based access control (ABAC)\n- Support for both allow and deny rules with conflict resolution\n\n\nThis template is designed to be deployed in Control Core's policy engine and can be customized to meet your specific requirements. It follows best practices for policy authoring and includes comprehensive error handling.",
  "use_cases": [
    {
      "title": "Data Lake Security: Research Access to Sensitive Data",
      "description": "Use data-masking-location-based.meta to control access to enterprise data lake",
      "scenario": "Pharmaceutical company with data lake containing clinical trial data (5PB, 1000+ datasets). Chief Data Officer requirements: (1) Data scientists access only relevant datasets, (2) PII automatically masked for non-clinical staff, (3) Competitive intelligence data restricted to senior leadership, (4) Data lineage tracked for regulatory submissions. Policy enforces: Dataset-level access based on project assignment in JIRA, automatic PII detection and masking using ML, executive-only access to acquisition target data, audit log every data access with project code. FDA audit: Demonstrated complete data governance, zero findings on data integrity."
    },
    {
      "title": "Customer 360: GDPR Right to Erasure Across Data Silos",
      "description": "Deploy data-masking-location-based.meta to handle data deletion requests across systems",
      "scenario": "Telecom provider with customer data in 25+ systems (CRM, billing, network logs, support tickets). GDPR officer challenge: Locate and delete all personal data within 30 days. Policy implementation: PII tagged with customer ID across all systems, automated discovery workflow queries all 25 systems, deletion orchestrator coordinates removal across databases, retention policy exceptions (e.g., legal holds) flagged, verification report generated for customer. Metrics: Average deletion time reduced from 45 days (manual) to 7 days (automated), data accuracy 99.8%, zero regulatory complaints."
    },
    {
      "title": "Financial Reporting: Sox Compliance for Data Changes",
      "description": "Apply data-masking-location-based.meta to ensure Sox-compliant financial data handling",
      "scenario": "Public company must prove financial data integrity for Sox 404 audit. External auditors test: (1) Unauthorized users can't modify financial data, (2) All changes logged with business justification, (3) Segregation of duties (preparer ≠ approver), (4) Changes outside close period blocked. Policy enforces: Read-only access to GL for all except Finance team (5 people), all GL changes require CFO approval via workflow, period close locks all entries (no backdating), audit trail captures changed values, approver, timestamp, reason code. External audit: Zero material weaknesses, praised for automated controls, audit time reduced 40%."
    },
    {
      "title": "Data Classification: Auto-Classification for Regulatory Compliance",
      "description": "Implement data-masking-location-based.meta for automatic data sensitivity labeling",
      "scenario": "Insurance company with 50TB of documents must classify by sensitivity (Public, Internal, Confidential, Restricted). General Counsel requirement: Prove appropriate handling based on classification. Policy automates: ML-based classification scanning documents for PII, PHI, payment data, executive communications; auto-tagging with sensitivity label; encryption enforcement for Confidential/Restricted; access controls based on labels; DLP policies preventing external sharing of Restricted data. Results: Classified 10M documents in 90 days (vs 18 months manual estimate), prevented 50 inadvertent Restricted data shares, passed privacy audit."
    },
    {
      "title": "Data Retention: Automated Lifecycle Management",
      "description": "Use data-masking-location-based.meta to enforce data retention and deletion policies",
      "scenario": "Healthcare provider must balance retention requirements (6 years for medical records) with storage costs and privacy. COO goals: (1) Comply with retention laws, (2) Delete data when no longer needed, (3) Reduce storage costs, (4) Support litigation holds. Policy implements: Automatic tagging with retention class at data creation, countdown timer to deletion date, litigation hold flag stops deletion, archive to cold storage after 3 years, permanent deletion after 6 years with compliance approval, audit trail for all deletions. Results: Reduced storage costs $500K/year, demonstrated compliance with 50+ state retention laws, zero sanctions for spoliation."
    }
  ],
  "conditions": [
    {
      "name": "action",
      "type": "string",
      "description": "The action attribute used in policy evaluation.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'action' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'action' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'action':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'action' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "read"
    },
    {
      "name": "context.authorized_locations",
      "type": "object",
      "description": "Context attribute 'authorized_locations' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "GeoIP Databases",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.authorized_locations' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.authorized_locations' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.authorized_locations':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.authorized_locations' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"country\": \"Canada\", \"region\": \"Ontario\", \"city\": \"Toronto\"}"
    },
    {
      "name": "context.authorized_regions",
      "type": "object",
      "description": "Context attribute 'authorized_regions' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.authorized_regions' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.authorized_regions' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.authorized_regions':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.authorized_regions' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"method\": \"mfa\", \"verified\": true, \"timestamp\": \"2024-10-23T14:30:00Z\"}"
    },
    {
      "name": "context.business_justification_provided",
      "type": "string",
      "description": "Context attribute 'business_justification_provided' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.business_justification_provided' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.business_justification_provided' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.business_justification_provided':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.business_justification_provided' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "Business requirement for quarterly audit"
    },
    {
      "name": "context.corporate_locations",
      "type": "object",
      "description": "Context attribute 'corporate_locations' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "GeoIP Databases",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.corporate_locations' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.corporate_locations' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.corporate_locations':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.corporate_locations' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"country\": \"Canada\", \"region\": \"Ontario\", \"city\": \"Toronto\"}"
    },
    {
      "name": "context.cross_border_transfer_restricted",
      "type": "object",
      "description": "Context attribute 'cross_border_transfer_restricted' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.cross_border_transfer_restricted' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.cross_border_transfer_restricted' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.cross_border_transfer_restricted':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.cross_border_transfer_restricted' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.data_classification",
      "type": "object",
      "description": "Context attribute 'data_classification' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.data_classification' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.data_classification' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.data_classification':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.data_classification' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"level\": \"confidential\", \"categories\": [\"pii\", \"financial\"]}"
    },
    {
      "name": "context.data_localization_countries",
      "type": "integer",
      "description": "Context attribute 'data_localization_countries' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.data_localization_countries' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.data_localization_countries' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.data_localization_countries':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.data_localization_countries' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "10"
    },
    {
      "name": "context.gdpr_compliant_transfer",
      "type": "object",
      "description": "Context attribute 'gdpr_compliant_transfer' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.gdpr_compliant_transfer' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.gdpr_compliant_transfer' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.gdpr_compliant_transfer':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.gdpr_compliant_transfer' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"status\": true, \"frameworks\": [\"SOC2\", \"HIPAA\"]}"
    },
    {
      "name": "context.required_security_level",
      "type": "integer",
      "description": "Context attribute 'required_security_level' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.required_security_level' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.required_security_level' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.required_security_level':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.required_security_level' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "5"
    },
    {
      "name": "context.required_vpn_security",
      "type": "boolean",
      "description": "Context attribute 'required_vpn_security' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.required_vpn_security' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.required_vpn_security' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.required_vpn_security':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.required_vpn_security' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.vpn_restricted_locations",
      "type": "object",
      "description": "Context attribute 'vpn_restricted_locations' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "GeoIP Databases",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.vpn_restricted_locations' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.vpn_restricted_locations' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.vpn_restricted_locations':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.vpn_restricted_locations' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"country\": \"Canada\", \"region\": \"Ontario\", \"city\": \"Toronto\"}"
    },
    {
      "name": "resource.data_residency_country",
      "type": "string",
      "description": "Resource attribute 'data_residency_country' - identifies or describes the resource being accessed. This helps determine if the resource characteristics match policy requirements.",
      "required": true,
      "data_sources": [
        {
          "name": "Resource Registry or Catalog",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Metadata",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "API Gateway Configuration",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'resource.data_residency_country' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'resource.data_residency_country' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'resource.data_residency_country':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'resource.data_residency_country' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "resource456"
    },
    {
      "name": "resource.type",
      "type": "object",
      "description": "Resource attribute 'type' - identifies or describes the resource being accessed. This helps determine if the resource characteristics match policy requirements.",
      "required": true,
      "data_sources": [
        {
          "name": "Resource Registry or Catalog",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Metadata",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "API Gateway Configuration",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'resource.type' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'resource.type' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'resource.type':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'resource.type' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"type\": \"document\", \"category\": \"financial\"}"
    },
    {
      "name": "user.country",
      "type": "integer",
      "description": "User attribute 'country' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.country' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.country' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.country':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.country' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "10"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "identity_and_access": [
        {
          "condition": "input.user.country",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.country",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.location",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.location",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.network_security_level",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.network_security_level",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.network_type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.network_type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.vpn_connected",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.vpn_connected",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.vpn_security_level",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.vpn_security_level",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.authorized_regions",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.authorized_regions",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.business_justification_provided",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.business_justification_provided",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.cross_border_transfer_restricted",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.cross_border_transfer_restricted",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.data_classification",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.data_classification",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.data_localization_countries",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.data_localization_countries",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.required_security_level",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.required_security_level",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.required_vpn_security",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.required_vpn_security",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.resource.data_residency_country",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.data_residency_country",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.resource.type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "infrastructure": [
        {
          "condition": "input.context.authorized_locations",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.authorized_locations",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.corporate_locations",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.corporate_locations",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.vpn_restricted_locations",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.vpn_restricted_locations",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "compliance_tools": [
        {
          "condition": "input.context.gdpr_compliant_transfer",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.gdpr_compliant_transfer",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "High - Complex policy with many conditions and data sources"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and ensure all prerequisites are met",
      "2. Configure data sources and integrations in Control Core",
      "3. Map required attributes (20 conditions identified) to your data sources",
      "4. Deploy policy to Sandbox environment using Control Core Admin UI",
      "5. Configure test users, resources, and scenarios in Sandbox",
      "6. Run comprehensive tests with various authorization scenarios",
      "7. Monitor policy evaluation logs and adjust conditions as needed",
      "8. Validate audit logging and compliance reporting",
      "9. Conduct user acceptance testing with stakeholders",
      "10. Promote to Production with gradual rollout (shadow mode, then enforcement)",
      "11. Set up monitoring alerts for policy violations and errors",
      "12. Document policy configuration and operational procedures"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • User with all required attributes → ALLOW",
      "      • User missing required attribute → DENY",
      "      • User with insufficient privileges → DENY",
      "      • Resource with correct classification → ALLOW",
      "      • Resource marked as restricted → DENY for non-owners",
      "      • Access from office IP → ALLOW",
      "      • Access from unknown location → DENY",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "configuration_tips": [
      "Start with permissive policies and gradually tighten restrictions",
      "Use policy versioning to track changes and enable rollbacks",
      "Implement comprehensive logging before enforcement",
      "Test in shadow mode to observe behavior without blocking access",
      "Document all customizations and environment-specific settings",
      "Set up monitoring dashboards for policy metrics",
      "Create runbooks for common policy-related incidents",
      "Establish a policy review and update schedule"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "troubleshooting": [
      "Check Control Core logs if policy evaluation fails",
      "Verify all required attributes are available in request context",
      "Ensure data source integrations are healthy and responsive",
      "Review audit logs to understand policy decisions",
      "Use Control Core's policy testing tools to debug conditions",
      "Check for network connectivity issues between PEP and PDP",
      "Verify policy syntax and structure using validator",
      "Contact Control Core support for persistent issues"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 20 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Identity And Access:",
      "   • Configure Custom data source integration for 'input.user.country'",
      "     - API: REST API endpoint",
      "     - Field: user.country",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.location'",
      "     - API: REST API endpoint",
      "     - Field: user.location",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.network_security_level'",
      "     - API: REST API endpoint",
      "     - Field: user.network_security_level",
      "     - Method: REST API",
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.authorized_regions'",
      "     - API: REST API endpoint",
      "     - Field: context.authorized_regions",
      "     - Method: REST API",
      "\n📦 Infrastructure:",
      "   • Configure Custom data source integration for 'input.context.authorized_locations'",
      "     - API: REST API endpoint",
      "     - Field: context.authorized_locations",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.corporate_locations'",
      "     - API: REST API endpoint",
      "     - Field: context.corporate_locations",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.vpn_restricted_locations'",
      "     - API: REST API endpoint",
      "     - Field: context.vpn_restricted_locations",
      "     - Method: REST API",
      "\n📦 Compliance Tools:",
      "   • Configure Custom data source integration for 'input.context.gdpr_compliant_transfer'",
      "     - API: REST API endpoint",
      "     - Field: context.gdpr_compliant_transfer",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • User conditions (6): user.country, user.location, user.network_security_level",
      "   • Resource conditions (2): resource.data_residency_country, resource.type",
      "   • Context conditions (11): context.authorized_locations, context.authorized_regions, context.business_justification_provided",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.authorized_locations' - track null/missing values",
      "     3. Monitor 'input.context.authorized_regions' - track null/missing values",
      "     4. Monitor 'input.context.business_justification_provided' - track null/missing values",
      "     5. Monitor 'input.context.corporate_locations' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "GDPR"
  ],
  "risk_level": "critical",
  "tags": [
    "location",
    "masking",
    "data",
    "based",
    "pii-management"
  ],
  "related_templates": [],
  "conditions_analysis": {
    "total_conditions": 20,
    "user_attributes": 6,
    "resource_attributes": 2,
    "context_attributes": 11
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.user.country",
          "input.user.location",
          "input.user.network_security_level",
          "input.user.network_type",
          "input.user.vpn_connected",
          "input.user.vpn_security_level",
          "input.context.authorized_regions",
          "input.context.business_justification_provided",
          "input.context.cross_border_transfer_restricted",
          "input.context.data_classification",
          "input.context.data_localization_countries",
          "input.context.required_security_level",
          "input.context.required_vpn_security",
          "input.resource.data_residency_country",
          "input.resource.type",
          "input.context.authorized_locations",
          "input.context.corporate_locations",
          "input.context.vpn_restricted_locations",
          "input.context.gdpr_compliant_transfer"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 19 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: user.country, user.location, user.network_security_level"
      },
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete"
      }
    ]
  }
}