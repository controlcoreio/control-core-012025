{
  "version": "1.0.0",
  "summary": "Policy to enforce collaboration and sharing tool behavior requirements This policy ensures secure and compliant use of collaboration tools Allow file sharing if security requirements are met",
  "detailed_description": "This policy template implements Sharing Tool Behavior controls for Collaboration. It provides comprehensive authorization and governance capabilities with real-time policy evaluation. \n\nThe policy evaluates 25 different conditions including user attributes, resource properties, and contextual information. Policy decisions are made dynamically based on the current state of the system, user context, and resource characteristics. \n\nKey capabilities:\n- Real-time authorization decisions with sub-millisecond evaluation\n- Comprehensive audit logging for all policy evaluations\n- Dynamic context enrichment from multiple data sources\n- Fine-grained attribute-based access control (ABAC)\n- Support for both allow and deny rules with conflict resolution\n\n\nThis template is designed to be deployed in Control Core's policy engine and can be customized to meet your specific requirements. It follows best practices for policy authoring and includes comprehensive error handling.",
  "use_cases": [
    {
      "title": "Enterprise SaaS: Customer-Facing Application Access Control",
      "description": "Deploy sharing-tool-behavior.meta for multi-tenant SaaS application",
      "scenario": "B2B SaaS platform with 5,000 business customers (50K end users) requires strict data isolation. Customer auditor testing: (1) Users from Company A cannot access Company B data under any circumstance, (2) Customer admins manage only their org users, (3) Super admin access logged and monitored, (4) Data export limited to customer's own data. Policy enforces: Tenant ID required on every database query, cross-tenant queries blocked at API level, admin actions require MFA + approval, automated testing of tenant isolation with 1000 test scenarios daily. Security: Zero cross-tenant data leaks in 3 years, SOC 2 compliant."
    },
    {
      "title": "Manufacturing: Supply Chain System Access Control",
      "description": "Implement sharing-tool-behavior.meta for supply chain partner access",
      "scenario": "Automotive manufacturer shares production data with 200 suppliers via portal. Operations requirements: (1) Suppliers see only their components' data, (2) Competitors never see each other's pricing/volumes, (3) Access revoked immediately when contract ends, (4) No data download of competitor info. Policy implementation: Supplier-specific data filtering based on component assignment, IP-restricted access from supplier offices only, automatic access termination on contract end date in ERP, DLP blocks download of competitive data, session timeout after 15 minutes. Results: Protected proprietary data, zero data leaks, supplier satisfaction score improved (relevant data only)."
    },
    {
      "title": "Government Agency: Classified Information Access",
      "description": "Apply sharing-tool-behavior.meta for government classification levels",
      "scenario": "Federal agency with Unclassified, Confidential, Secret, Top Secret data must prove need-to-know controls. Security officer audit: (1) Users access only cleared classification level, (2) Access granted only for assigned projects, (3) All Secret/Top Secret access reviewed by security officer, (4) Anomalous access patterns detected. Policy enforces: Clearance level from HR system required, project assignment from PMO tool required, two-person rule for Top Secret, behavioral analytics detect unusual access (time, volume, content), automatic alerts to security officer. Result: Passed DoD security inspection, zero insider threat incidents."
    }
  ],
  "conditions": [
    {
      "name": "action",
      "type": "string",
      "description": "The action attribute used in policy evaluation.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'action' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'action' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'action':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'action' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "read"
    },
    {
      "name": "context.access_controls_configured",
      "type": "object",
      "description": "Context attribute 'access_controls_configured' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.access_controls_configured' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.access_controls_configured' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.access_controls_configured':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.access_controls_configured' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.audit_logging_enabled",
      "type": "boolean",
      "description": "Context attribute 'audit_logging_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.audit_logging_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.audit_logging_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.audit_logging_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.audit_logging_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.backup_verified",
      "type": "object",
      "description": "Context attribute 'backup_verified' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.backup_verified' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.backup_verified' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.backup_verified':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.backup_verified' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.change_tracking_enabled",
      "type": "boolean",
      "description": "Context attribute 'change_tracking_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.change_tracking_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.change_tracking_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.change_tracking_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.change_tracking_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.collaboration_permissions_valid",
      "type": "string",
      "description": "Context attribute 'collaboration_permissions_valid' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Role-Based Access Control (RBAC) System",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Identity Provider Role Assignments",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.collaboration_permissions_valid' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.collaboration_permissions_valid' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.collaboration_permissions_valid':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.collaboration_permissions_valid' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "context.content_filtering_enabled",
      "type": "boolean",
      "description": "Context attribute 'content_filtering_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.content_filtering_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.content_filtering_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.content_filtering_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.content_filtering_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.encryption_enabled",
      "type": "boolean",
      "description": "Context attribute 'encryption_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.encryption_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.encryption_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.encryption_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.encryption_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.external_sharing_enabled",
      "type": "boolean",
      "description": "Context attribute 'external_sharing_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.external_sharing_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.external_sharing_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.external_sharing_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.external_sharing_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.file_classification",
      "type": "object",
      "description": "Context attribute 'file_classification' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.file_classification' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.file_classification' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.file_classification':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.file_classification' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"level\": \"confidential\", \"categories\": [\"pii\", \"financial\"]}"
    },
    {
      "name": "context.legal_hold_not_applicable",
      "type": "object",
      "description": "Context attribute 'legal_hold_not_applicable' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.legal_hold_not_applicable' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.legal_hold_not_applicable' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.legal_hold_not_applicable':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.legal_hold_not_applicable' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"attribute\": \"value\", \"verified\": true}"
    },
    {
      "name": "context.meeting_authentication_valid",
      "type": "string",
      "description": "Context attribute 'meeting_authentication_valid' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.meeting_authentication_valid' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.meeting_authentication_valid' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.meeting_authentication_valid':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.meeting_authentication_valid' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "context.message_encryption_enabled",
      "type": "boolean",
      "description": "Context attribute 'message_encryption_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.message_encryption_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.message_encryption_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.message_encryption_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.message_encryption_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.mfa_required",
      "type": "boolean",
      "description": "Context attribute 'mfa_required' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "External APIs and Data Sources",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Real-time Data Pipelines",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.mfa_required' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.mfa_required' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.mfa_required':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.mfa_required' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    },
    {
      "name": "context.participant_verification_enabled",
      "type": "boolean",
      "description": "Context attribute 'participant_verification_enabled' - provides environmental or situational information about the request. This enables dynamic, context-aware policy decisions.",
      "required": true,
      "data_sources": [
        {
          "name": "Event Streaming Platforms (Kafka, Kinesis)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "VPN/Proxy Detection Services",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "GeoIP Databases",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'context.participant_verification_enabled' at policy evaluation time. This attribute will be included in the authorization request context. Set up a Context Generation Service to provide real-time context data. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'context.participant_verification_enabled' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'context.participant_verification_enabled':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'context.participant_verification_enabled' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "true"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "data_sources": [
        {
          "condition": "input.action",
          "system": "Application Code",
          "api_endpoint": "Application sends action in request",
          "field_mapping": "action",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.action",
          "system": "API Gateway",
          "api_endpoint": "Map HTTP method to action",
          "field_mapping": "GET→read, POST→create, DELETE→delete",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.access_controls_configured",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.access_controls_configured",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.audit_logging_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.audit_logging_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.backup_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.backup_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.change_tracking_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.change_tracking_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.collaboration_permissions_valid",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.collaboration_permissions_valid",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.content_filtering_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.content_filtering_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.encryption_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.encryption_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.external_sharing_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.external_sharing_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.file_classification",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.file_classification",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.legal_hold_not_applicable",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.legal_hold_not_applicable",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.meeting_authentication_valid",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.meeting_authentication_valid",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.message_encryption_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.message_encryption_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.mfa_required",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.mfa_required",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.retention_period_expired",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.retention_period_expired",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.sensitive_data_visible",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.sensitive_data_visible",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.sharing_permissions_valid",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.sharing_permissions_valid",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.version_control_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.version_control_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.workspace_permissions_valid",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.workspace_permissions_valid",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.resource.type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "resource.type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "infrastructure": [
        {
          "condition": "input.context.participant_verification_enabled",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.participant_verification_enabled",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.recipient_authorized",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.recipient_authorized",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.recipients_authorized",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.recipients_authorized",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.context.workspace_membership_verified",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.workspace_membership_verified",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "compliance_tools": [
        {
          "condition": "input.context.recording_consent_obtained",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "context.recording_consent_obtained",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "API Gateway",
      "Application Code",
      "Custom data source"
    ],
    "complexity_score": "High - Complex policy with many conditions and data sources"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and ensure all prerequisites are met",
      "2. Configure data sources and integrations in Control Core",
      "3. Map required attributes (25 conditions identified) to your data sources",
      "4. Deploy policy to Sandbox environment using Control Core Admin UI",
      "5. Configure test users, resources, and scenarios in Sandbox",
      "6. Run comprehensive tests with various authorization scenarios",
      "7. Monitor policy evaluation logs and adjust conditions as needed",
      "8. Validate audit logging and compliance reporting",
      "9. Conduct user acceptance testing with stakeholders",
      "10. Promote to Production with gradual rollout (shadow mode, then enforcement)",
      "11. Set up monitoring alerts for policy violations and errors",
      "12. Document policy configuration and operational procedures"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • Resource with correct classification → ALLOW",
      "      • Resource marked as restricted → DENY for non-owners",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "configuration_tips": [
      "Start with permissive policies and gradually tighten restrictions",
      "Use policy versioning to track changes and enable rollbacks",
      "Implement comprehensive logging before enforcement",
      "Test in shadow mode to observe behavior without blocking access",
      "Document all customizations and environment-specific settings",
      "Set up monitoring dashboards for policy metrics",
      "Create runbooks for common policy-related incidents",
      "Establish a policy review and update schedule"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "troubleshooting": [
      "Check Control Core logs if policy evaluation fails",
      "Verify all required attributes are available in request context",
      "Ensure data source integrations are healthy and responsive",
      "Review audit logs to understand policy decisions",
      "Use Control Core's policy testing tools to debug conditions",
      "Check for network connectivity issues between PEP and PDP",
      "Verify policy syntax and structure using validator",
      "Contact Control Core support for persistent issues"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 25 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Data Sources:",
      "   • Configure Application Code integration for 'input.action'",
      "     - API: Application sends action in request",
      "     - Field: action",
      "     - Method: REST API",
      "   • Configure API Gateway integration for 'input.action'",
      "     - API: Map HTTP method to action",
      "     - Field: GET→read, POST→create, DELETE→delete",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.access_controls_configured'",
      "     - API: REST API endpoint",
      "     - Field: context.access_controls_configured",
      "     - Method: REST API",
      "\n📦 Infrastructure:",
      "   • Configure Custom data source integration for 'input.context.participant_verification_enabled'",
      "     - API: REST API endpoint",
      "     - Field: context.participant_verification_enabled",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.recipient_authorized'",
      "     - API: REST API endpoint",
      "     - Field: context.recipient_authorized",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.context.recipients_authorized'",
      "     - API: REST API endpoint",
      "     - Field: context.recipients_authorized",
      "     - Method: REST API",
      "\n📦 Compliance Tools:",
      "   • Configure Custom data source integration for 'input.context.recording_consent_obtained'",
      "     - API: REST API endpoint",
      "     - Field: context.recording_consent_obtained",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • Resource conditions (1): resource.type",
      "   • Context conditions (23): context.access_controls_configured, context.audit_logging_enabled, context.backup_verified",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.action' - track null/missing values",
      "     2. Monitor 'input.context.access_controls_configured' - track null/missing values",
      "     3. Monitor 'input.context.audit_logging_enabled' - track null/missing values",
      "     4. Monitor 'input.context.backup_verified' - track null/missing values",
      "     5. Monitor 'input.context.change_tracking_enabled' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "ISO 27001",
    "SOC 2 Type II"
  ],
  "risk_level": "critical",
  "tags": [
    "compliance",
    "collaboration",
    "encryption",
    "behavior",
    "tool",
    "audit-logging",
    "sharing",
    "rbac"
  ],
  "related_templates": [],
  "conditions_analysis": {
    "total_conditions": 25,
    "user_attributes": 0,
    "resource_attributes": 1,
    "context_attributes": 23
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Application Code",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Application Code",
          "2. Test API access: Application sends action in request",
          "3. In Control Core: Settings → Integrations → Add Application Code",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: action"
      },
      {
        "system": "API Gateway",
        "attributes_needed": [
          "input.action"
        ],
        "integration_steps": [
          "1. Obtain API credentials for API Gateway",
          "2. Test API access: Map HTTP method to action",
          "3. In Control Core: Settings → Integrations → Add API Gateway",
          "4. Configure field mappings for 1 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: GET→read, POST→create, DELETE→delete"
      },
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.context.access_controls_configured",
          "input.context.audit_logging_enabled",
          "input.context.backup_verified",
          "input.context.change_tracking_enabled",
          "input.context.collaboration_permissions_valid",
          "input.context.content_filtering_enabled",
          "input.context.encryption_enabled",
          "input.context.external_sharing_enabled",
          "input.context.file_classification",
          "input.context.legal_hold_not_applicable",
          "input.context.meeting_authentication_valid",
          "input.context.message_encryption_enabled",
          "input.context.mfa_required",
          "input.context.retention_period_expired",
          "input.context.sensitive_data_visible",
          "input.context.sharing_permissions_valid",
          "input.context.version_control_enabled",
          "input.context.workspace_permissions_valid",
          "input.resource.type",
          "input.context.participant_verification_enabled",
          "input.context.recipient_authorized",
          "input.context.recipients_authorized",
          "input.context.workspace_membership_verified",
          "input.context.recording_consent_obtained"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 24 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: context.access_controls_configured, context.audit_logging_enabled, context.backup_verified"
      }
    ]
  }
}