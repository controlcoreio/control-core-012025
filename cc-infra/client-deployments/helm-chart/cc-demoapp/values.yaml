# Default values for cc-demoapp-stack Helm chart

# Global settings
global:
  environment: local-dev
  stack: cc-demoapp-stack

# PostgreSQL Helm chart configuration
postgresql:
  enabled: true
  auth:
    username: postgres
    password: password
    database: postgres
  image:
    tag: "15"
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"
  service:
    ports:
      postgresql: 5432
  initdb:
    scripts:
      create-consulting-db.sql: |
        CREATE DATABASE consulting_db;
        GRANT ALL PRIVILEGES ON DATABASE consulting_db TO postgres;

# API backend configuration
api:
  name: cc-demoapp-api
  replicaCount: 1
  deployment:
    image:
      repository: 061730756658.dkr.ecr.ca-central-1.amazonaws.com/controlcoreio/cc-demoapp/backend-api
      tag: latest
      pullPolicy: Never
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "200m"
    env:
      - name: DATABASE_URL
        value: postgresql://postgres:password@cc-demoapp-postgresql:5432/postgres
      - name: PORT
        value: "8000"
    probes:
      readiness:
        path: /
        port: 8000
        initialDelaySeconds: 10
        periodSeconds: 300
        timeoutSeconds: 30
      liveness:
        path: /
        port: 8000
        initialDelaySeconds: 15
        periodSeconds: 300
        timeoutSeconds: 30
  # Control Core Bouncer Sidecar configuration
  sidecar:
    name: cc-bouncer-sidecar
    enabled: true
    image:
      repository: 061730756658.dkr.ecr.ca-central-1.amazonaws.com/controlcoreio/cc-bouncer
      tag: latest
      pullPolicy: Never
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "200m"
    env:
      - name: BOUNCER_PORT
        value: "8080"
      - name: TARGET_HOST
        value: "localhost:8000"
      - name: PAP_API_URL
        value: "http://cc-pap:8082"
      - name: OPAL_SERVER_URL
        value: "http://cc-opal:7000"
      - name: TENANT_ID
        value: "acme-demo"
      - name: API_KEY
        value: "demo-api-key"
      - name: LOG_ENABLED
        value: "true"
      - name: CACHE_ENABLED
        value: "true"
    probes:
      liveness:
        path: /health
        port: 8080
        initialDelaySeconds: 10
        periodSeconds: 300
        timeoutSeconds: 30
      readiness:
        path: /health
        port: 8080
        initialDelaySeconds: 5
        periodSeconds: 300
        timeoutSeconds: 30
  service:
    type: NodePort
    ports:
      - name: api
        port: 8000
        targetPort: 8000
        nodePort: 30800
      - name: sidecar
        port: 8080
        targetPort: 8080
        nodePort: 30808

# Frontend configuration
frontend:
  name: acme-frontend
  replicaCount: 1
  image:
    repository: 061730756658.dkr.ecr.ca-central-1.amazonaws.com/controlcoreio/acme-demo/frontend
    tag: latest
    pullPolicy: Never
  service:
    type: NodePort
    port: 3000
    nodePort: 30300
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "200m"
  env:
    - name: NEXT_PUBLIC_API_BASE_URL
      value: http://acme-api-local-dev:8000
    - name: PORT
      value: "3000"
  probes:
    readiness:
      path: /acme-demo
      port: 3000
      initialDelaySeconds: 5
      periodSeconds: 300
      timeoutSeconds: 30
    liveness:
      path: /acme-demo
      port: 3000
      initialDelaySeconds: 15
      periodSeconds: 300
      timeoutSeconds: 30

# Standalone Control Core Bouncer (Alternative to sidecar)
standaloneBouncer:
  name: cc-bouncer-standalone
  enabled: false  # Set to true to use standalone instead of sidecar
  replicaCount: 1
  image:
    repository: 061730756658.dkr.ecr.ca-central-1.amazonaws.com/controlcoreio/cc-bouncer
    tag: latest
    pullPolicy: Never
  service:
    type: NodePort
    port: 8080
    nodePort: 30808
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "200m"
  env:
    - name: BOUNCER_PORT
      value: "8080"
    - name: TARGET_HOST
      value: "acme-api-local-dev:8000"
    - name: PAP_API_URL
      value: "http://cc-pap:8082"
    - name: OPAL_SERVER_URL
      value: "http://cc-opal:7000"
    - name: TENANT_ID
      value: "acme-demo"
    - name: API_KEY
      value: "demo-api-key"
    - name: LOG_ENABLED
      value: "true"
    - name: CACHE_ENABLED
      value: "true"
  probes:
    liveness:
      path: /health
      port: 8080
      initialDelaySeconds: 10
      periodSeconds: 300
      timeoutSeconds: 30
    readiness:
      path: /health
      port: 8080
      initialDelaySeconds: 5
      periodSeconds: 300
      timeoutSeconds: 30

# Ingress configuration for frontend and backend
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /acme-demo
    nginx.ingress.kubernetes.io/use-regex: "true"
  hosts:
    - host: localhost
      paths:
        - path: /acme-demo
          pathType: ImplementationSpecific
          serviceName: acme-frontend
          servicePort: 3000
        {{- if .Values.standaloneBouncer.enabled }}
        - path: /acme-demo/bouncer
          pathType: ImplementationSpecific
          serviceName: cc-bouncer-standalone-local-dev
          servicePort: 8080
        {{- end }}
