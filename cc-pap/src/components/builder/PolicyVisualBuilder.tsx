import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  Shield, 
  Users, 
  Target, 
  Plus, 
  Trash2, 
  Eye, 
  Edit3,
  Lock,
  Unlock,
  AlertTriangle,
  CheckCircle,
  Zap,
  Brain
} from "lucide-react";

interface PolicyData {
  name: string;
  description: string;
  resourceId: string;
  bouncerId: string;
  effect: 'allow' | 'deny' | 'mask' | 'log';
  conditions: PolicyCondition[];
  regoCode: string;
  status: 'draft' | 'active';
}

interface PolicyCondition {
  id: string;
  attribute: string;
  operator: string;
  value: string;
  enabled: boolean;
}

interface SmartSuggestion {
  type: string;
  title: string;
  description: string;
  priority: string;
}

interface PolicyVisualBuilderProps {
  policyData: PolicyData;
  setPolicyData: (data: PolicyData) => void;
  onNext: () => void;
}

interface Condition {
  id: string;
  attribute: string;
  operator: string;
  value: string;
  enabled: boolean;
}

export function PolicyVisualBuilder({ 
  policyData, 
  setPolicyData, 
  onNext 
}: PolicyVisualBuilderProps) {
  const [conditions, setConditions] = useState<Condition[]>([]);
  const [effect, setEffect] = useState<'allow' | 'deny' | 'mask' | 'log'>('allow');
  const [isGenerating, setIsGenerating] = useState(false);
  const [smartSuggestions, setSmartSuggestions] = useState<SmartSuggestion[]>([]);

  const attributeOptions = [
    { value: 'user.role', label: 'User Role', category: 'User' },
    { value: 'user.department', label: 'Department', category: 'User' },
    { value: 'user.clearance_level', label: 'Clearance Level', category: 'User' },
    { value: 'resource.type', label: 'Resource Type', category: 'Resource' },
    { value: 'resource.classification', label: 'Classification', category: 'Resource' },
    { value: 'action', label: 'Action', category: 'Action' },
    { value: 'time.hour', label: 'Time of Day', category: 'Context' },
    { value: 'location.country', label: 'Country', category: 'Context' }
  ];

  const operatorOptions = [
    { value: 'equals', label: 'Equals' },
    { value: 'not_equals', label: 'Not Equals' },
    { value: 'in', label: 'In' },
    { value: 'not_in', label: 'Not In' },
    { value: 'contains', label: 'Contains' },
    { value: 'starts_with', label: 'Starts With' },
    { value: 'ends_with', label: 'Ends With' },
    { value: 'greater_than', label: 'Greater Than' },
    { value: 'less_than', label: 'Less Than' }
  ];

  const addCondition = () => {
    const newCondition: Condition = {
      id: `condition_${Date.now()}`,
      attribute: 'user.role',
      operator: 'equals',
      value: '',
      enabled: true
    };
    setConditions([...conditions, newCondition]);
  };

  const updateCondition = (id: string, field: keyof Condition, value: string | boolean) => {
    setConditions(conditions.map(condition => 
      condition.id === id ? { ...condition, [field]: value } : condition
    ));
  };

  const removeCondition = (id: string) => {
    setConditions(conditions.filter(condition => condition.id !== id));
  };

  const generatePolicy = async () => {
    setIsGenerating(true);
    try {
      // Simulate policy generation
      const regoCode = `package controlcore.${policyData.name?.replace(/\s+/g, "_").toLowerCase() || 'policy'}

# Policy: ${policyData.name || 'Generated Policy'}
# Description: ${policyData.description || 'Generated by Visual Builder'}

default allow = false

${effect} {
${conditions.filter(c => c.enabled).map(condition => 
  `  input.${condition.attribute} ${condition.operator} "${condition.value}"`
).join('\n')}
}

# Generated conditions:
${conditions.filter(c => c.enabled).map((condition, index) => 
  `# ${index + 1}. ${condition.attribute} ${condition.operator} "${condition.value}"`
).join('\n')}`;

      setPolicyData({ ...policyData, regoCode });
      
      // Generate smart suggestions
      const suggestions = [
        {
          type: 'security',
          title: 'Add authentication check',
          description: 'Consider adding user authentication validation',
          priority: 'high'
        },
        {
          type: 'performance',
          title: 'Optimize conditions',
          description: 'Combine similar conditions for better performance',
          priority: 'medium'
        }
      ];
      
      setSmartSuggestions(suggestions);
    } catch (error) {
      console.error('Policy generation failed:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const getConditionIcon = (attribute: string) => {
    if (attribute.startsWith('user.')) return Users;
    if (attribute.startsWith('resource.')) return Target;
    if (attribute.startsWith('time.') || attribute.startsWith('location.')) return Shield;
    return Shield;
  };

  const getEffectIcon = (effect: string) => {
    switch (effect) {
      case 'allow': return Unlock;
      case 'deny': return Lock;
      case 'mask': return Eye;
      case 'log': return Edit3;
      default: return Shield;
    }
  };

  const getEffectColor = (effect: string) => {
    switch (effect) {
      case 'allow': return 'text-green-600 bg-green-100';
      case 'deny': return 'text-red-600 bg-red-100';
      case 'mask': return 'text-yellow-600 bg-yellow-100';
      case 'log': return 'text-blue-600 bg-blue-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <Shield className="h-5 w-5 text-blue-600" />
          <h3 className="text-lg font-semibold">Visual Policy Builder</h3>
          <Badge variant="outline" className="text-xs">
            <Brain className="h-3 w-3 mr-1" />
            AI-Assisted
          </Badge>
        </div>
        
        <Button
          onClick={generatePolicy}
          disabled={isGenerating}
          className="flex items-center gap-2"
        >
          {isGenerating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              Generating...
            </>
          ) : (
            <>
              <Zap className="h-4 w-4" />
              Generate Policy
            </>
          )}
        </Button>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-y-auto space-y-6">
        {/* Policy Effect */}
        <Card>
          <CardHeader>
            <CardTitle className="text-base">What should happen?</CardTitle>
            <CardDescription>
              Define the action when conditions are met
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {[
                { value: 'allow', label: 'Allow Access', description: 'Grant access to the resource' },
                { value: 'deny', label: 'Deny Access', description: 'Block access to the resource' },
                { value: 'mask', label: 'Mask Data', description: 'Hide sensitive information' },
                { value: 'log', label: 'Log & Allow', description: 'Log the action and allow access' }
              ].map((option) => {
                const Icon = getEffectIcon(option.value);
                return (
                  <Card
                    key={option.value}
                    className={`cursor-pointer transition-all hover:shadow-md ${
                      effect === option.value 
                        ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                        : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                    }`}
                    onClick={() => setEffect(option.value as 'allow' | 'deny' | 'mask' | 'log')}
                  >
                    <CardContent className="p-4 text-center">
                      <Icon className={`h-6 w-6 mx-auto mb-2 ${
                        effect === option.value ? 'text-blue-600' : 'text-gray-400'
                      }`} />
                      <h4 className="font-medium text-sm">{option.label}</h4>
                      <p className="text-xs text-muted-foreground mt-1">
                        {option.description}
                      </p>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </CardContent>
        </Card>

        {/* Conditions */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-base">When should this apply?</CardTitle>
                <CardDescription>
                  Add conditions that must be met for this policy to apply
                </CardDescription>
              </div>
              <Button onClick={addCondition} size="sm">
                <Plus className="h-4 w-4 mr-2" />
                Add Condition
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {conditions.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <Shield className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>No conditions added yet</p>
                <p className="text-sm">Click "Add Condition" to get started</p>
              </div>
            ) : (
              <div className="space-y-3">
                {conditions.map((condition, index) => {
                  const Icon = getConditionIcon(condition.attribute);
                  return (
                    <Card key={condition.id} className="p-4">
                      <div className="flex items-center gap-3">
                        <div className="flex items-center gap-2">
                          <Checkbox
                            checked={condition.enabled}
                            onCheckedChange={(checked) => 
                              updateCondition(condition.id, 'enabled', checked)
                            }
                          />
                          <Icon className="h-4 w-4 text-gray-500" />
                        </div>
                        
                        <div className="flex-1 grid grid-cols-1 md:grid-cols-3 gap-3">
                          <Select
                            value={condition.attribute}
                            onValueChange={(value) => 
                              updateCondition(condition.id, 'attribute', value)
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {attributeOptions.map((option) => (
                                <SelectItem key={option.value} value={option.value}>
                                  <div className="flex items-center gap-2">
                                    <span>{option.label}</span>
                                    <Badge variant="outline" className="text-xs">
                                      {option.category}
                                    </Badge>
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          
                          <Select
                            value={condition.operator}
                            onValueChange={(value) => 
                              updateCondition(condition.id, 'operator', value)
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {operatorOptions.map((option) => (
                                <SelectItem key={option.value} value={option.value}>
                                  {option.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          
                          <div className="flex gap-2">
                            <Input
                              value={condition.value}
                              onChange={(e) => 
                                updateCondition(condition.id, 'value', e.target.value)
                              }
                              placeholder="Value"
                              className="flex-1"
                            />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => removeCondition(condition.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </Card>
                  );
                })}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Smart Suggestions */}
        {smartSuggestions.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Brain className="h-4 w-4 text-purple-600" />
                AI Suggestions
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {smartSuggestions.map((suggestion: SmartSuggestion, index: number) => (
                  <div key={index} className="flex items-start gap-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                    <div className={`p-1 rounded-full ${
                      suggestion.priority === 'high' ? 'bg-red-100 text-red-600' :
                      suggestion.priority === 'medium' ? 'bg-yellow-100 text-yellow-600' :
                      'bg-blue-100 text-blue-600'
                    }`}>
                      <AlertTriangle className="h-4 w-4" />
                    </div>
                    <div className="flex-1">
                      <h6 className="font-medium">{suggestion.title}</h6>
                      <p className="text-sm text-muted-foreground">
                        {suggestion.description}
                      </p>
                    </div>
                    <Button size="sm" variant="outline">
                      Apply
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Policy Preview */}
        {conditions.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Policy Preview</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">Effect:</span>
                  <Badge className={getEffectColor(effect)}>
                    <Shield className="h-3 w-3 mr-1" />
                    {effect.toUpperCase()}
                  </Badge>
                </div>
                <div className="text-sm text-muted-foreground">
                  When {conditions.filter(c => c.enabled).length} condition(s) are met
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Footer */}
      <div className="flex justify-between pt-4 border-t">
        <Button variant="outline">
          <Eye className="h-4 w-4 mr-2" />
          Preview
        </Button>
        
        <Button onClick={onNext}>
          Next: Code Editor
        </Button>
      </div>
    </div>
  );
}
