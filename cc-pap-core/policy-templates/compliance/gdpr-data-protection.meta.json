{
  "version": "1.0.0",
  "summary": "GDPR Data Protection Policy Ensures compliance with GDPR data protection requirements Default deny",
  "detailed_description": "This policy template implements Gdpr Data Protection controls for Compliance. It provides comprehensive authorization and governance capabilities with real-time policy evaluation. \n\nThe policy evaluates 15 different conditions including user attributes, resource properties, and contextual information. Policy decisions are made dynamically based on the current state of the system, user context, and resource characteristics. \n\nKey capabilities:\n- Real-time authorization decisions with sub-millisecond evaluation\n- Comprehensive audit logging for all policy evaluations\n- Dynamic context enrichment from multiple data sources\n- Fine-grained attribute-based access control (ABAC)\n- Support for both allow and deny rules with conflict resolution\n\n\nThis template is designed to be deployed in Control Core's policy engine and can be customized to meet your specific requirements. It follows best practices for policy authoring and includes comprehensive error handling.",
  "use_cases": [
    {
      "title": "Spotify: GDPR for EU User Personal Data",
      "description": "Swedish company managing 240M EU subscriber data under GDPR",
      "scenario": "Spotify implements GDPR controls: Consent management (marketing opt-in), data subject rights portal (access, deletion, portability), data protection impact assessments (DPIAs for new features), Data Protection Officer. GDPR compliance: 50K data subject requests monthly (processed <30 days), zero regulatory fines, strong privacy-by-design culture."
    },
    {
      "title": "Deutsche Bank: GDPR for Financial Services",
      "description": "German bank implementing GDPR for customer data protection",
      "scenario": "Deutsche Bank (9M customers) maintains GDPR compliance: Legal basis for processing (contract, legal obligation, legitimate interest), cross-border transfer safeguards (SCCs for non-EU transfers), retention limits (deleted when purpose complete), DPIA for high-risk processing. BaFin + GDPR: Zero violations, strong data protection framework."
    },
    {
      "title": "SAP: GDPR for Enterprise Software and Customer Data",
      "description": "German software company processing EU business customer data",
      "scenario": "SAP (data processor for 400K businesses) implements GDPR: Data processing agreements (DPAs) with all customers, sub-processor management, security measures (ISO 27001, SOC 2), data breach notification (<72 hours to customers). GDPR compliance: Annual DPA renewals, zero reportable breaches, strong processor accountability."
    }
  ],
  "conditions": [
    {
      "name": "data.sensitive",
      "type": "string",
      "description": "The 'data.sensitive' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'data.sensitive' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'data.sensitive' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'data.sensitive':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'data.sensitive' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "processing.data_minimization",
      "type": "string",
      "description": "The 'processing.data_minimization' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'processing.data_minimization' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'processing.data_minimization' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'processing.data_minimization':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'processing.data_minimization' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "processing.legal_basis",
      "type": "string",
      "description": "The 'processing.legal_basis' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'processing.legal_basis' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'processing.legal_basis' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'processing.legal_basis':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'processing.legal_basis' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "processing.legitimate_interest",
      "type": "string",
      "description": "The 'processing.legitimate_interest' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'processing.legitimate_interest' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'processing.legitimate_interest' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'processing.legitimate_interest':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'processing.legitimate_interest' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "processing.necessary",
      "type": "string",
      "description": "The 'processing.necessary' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'processing.necessary' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'processing.necessary' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'processing.necessary':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'processing.necessary' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "processing.original_purpose",
      "type": "string",
      "description": "The 'processing.original_purpose' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'processing.original_purpose' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'processing.original_purpose' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'processing.original_purpose':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'processing.original_purpose' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "processing.purpose",
      "type": "string",
      "description": "The 'processing.purpose' attribute is evaluated at runtime to make policy decisions. This condition is checked against incoming request data to determine authorization.",
      "required": true,
      "data_sources": [
        {
          "name": "REST API Endpoints",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Policy Information Point (PIP)",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "Database Queries",
          "integration_method": "Direct SQL query - Control Core connects to application database to check resource ownership, classification tags",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'processing.purpose' at policy evaluation time. This attribute will be included in the authorization request context. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'processing.purpose' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'processing.purpose':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'processing.purpose' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [
        "value1",
        "value2",
        "value3"
      ],
      "example_value": "example_value"
    },
    {
      "name": "user.consent.explicit",
      "type": "object",
      "description": "User attribute 'consent.explicit' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.explicit' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.explicit' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.explicit':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.explicit' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.freely_given",
      "type": "object",
      "description": "User attribute 'consent.freely_given' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.freely_given' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.freely_given' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.freely_given':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.freely_given' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.gdpr",
      "type": "object",
      "description": "User attribute 'consent.gdpr' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.gdpr' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.gdpr' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.gdpr':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.gdpr' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.informed",
      "type": "object",
      "description": "User attribute 'consent.informed' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.informed' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.informed' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.informed':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.informed' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.purpose_change",
      "type": "object",
      "description": "User attribute 'consent.purpose_change' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.purpose_change' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.purpose_change' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.purpose_change':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.purpose_change' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.specific",
      "type": "object",
      "description": "User attribute 'consent.specific' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.specific' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.specific' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.specific':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.specific' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.consent.withdrawn",
      "type": "object",
      "description": "User attribute 'consent.withdrawn' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.consent.withdrawn' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.consent.withdrawn' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.consent.withdrawn':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.consent.withdrawn' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    },
    {
      "name": "user.request.type",
      "type": "object",
      "description": "User attribute 'request.type' - identifies or describes the user making the request. This is evaluated at runtime to determine if the user meets the required criteria.",
      "required": true,
      "data_sources": [
        {
          "name": "Identity Provider (IdP) - Okta, Auth0, Azure AD, etc.",
          "integration_method": "SAML or OIDC integration - Control Core retrieves user attributes from IdP token claims during authentication",
          "example_api": "GET /api/v1/users/{userId} returns {profile: {role: 'Manager', department: 'Finance'}}"
        },
        {
          "name": "JWT Token Claims",
          "integration_method": "API integration - Control Core fetches this attribute via REST API call during policy evaluation",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        },
        {
          "name": "User Directory - LDAP, Active Directory",
          "integration_method": "LDAP query - Control Core queries AD for user groups, department, manager attributes in real-time",
          "example_api": "Example: GET /api/attributes/{attributeName}?userId={userId}"
        }
      ],
      "configuration_notes": "Configure Control Core to fetch 'user.request.type' at policy evaluation time. This attribute will be included in the authorization request context. Ensure your Identity Provider is properly integrated with Control Core. Map this attribute in your Policy Enforcement Point (PEP) configuration.",
      "plain_english": "Runtime evaluation of 'user.request.type' to make access control decisions based on current request context.",
      "how_to_fetch": "Configure Control Core to fetch 'user.request.type':\n1. In Control Core Admin UI, go to Settings > Attribute Sources\n2. Click 'Add Attribute Source' and select your identity/data provider\n3. Map 'user.request.type' to the corresponding field in your source system\n4. Configure refresh interval (e.g., cache for 5 minutes, fetch on each request for sensitive data)\n5. Test the mapping with sample users to verify correct values are retrieved\n6. Enable the attribute for use in policies",
      "example_values": [],
      "example_value": "{\"id\": \"user123\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}"
    }
  ],
  "requirements": {
    "detailed_requirements": {
      "identity_and_access": [
        {
          "condition": "input.user.consent.explicit",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.explicit",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.freely_given",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.freely_given",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.gdpr",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.gdpr",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.informed",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.informed",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.purpose_change",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.purpose_change",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.specific",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.specific",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.consent.withdrawn",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.consent.withdrawn",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.user.request.type",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "user.request.type",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ],
      "data_sources": [
        {
          "condition": "input.data.sensitive",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "data.sensitive",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.processing.data_minimization",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "processing.data_minimization",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.processing.legal_basis",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "processing.legal_basis",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.processing.legitimate_interest",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "processing.legitimate_interest",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.processing.necessary",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "processing.necessary",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.processing.original_purpose",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "processing.original_purpose",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        },
        {
          "condition": "input.processing.purpose",
          "system": "Custom data source",
          "api_endpoint": "REST API endpoint",
          "field_mapping": "processing.purpose",
          "integration_method": "REST API",
          "setup_notes": "Configure in system admin",
          "documentation": ""
        }
      ]
    },
    "systems_needed": [
      "Custom data source"
    ],
    "complexity_score": "Medium - Moderate complexity requiring multiple integrations"
  },
  "deployment_notes": {
    "setup_steps": [
      "1. Review policy requirements and ensure all prerequisites are met",
      "2. Configure data sources and integrations in Control Core",
      "3. Map required attributes (15 conditions identified) to your data sources",
      "4. Deploy policy to Sandbox environment using Control Core Admin UI",
      "5. Configure test users, resources, and scenarios in Sandbox",
      "6. Run comprehensive tests with various authorization scenarios",
      "7. Monitor policy evaluation logs and adjust conditions as needed",
      "8. Validate audit logging and compliance reporting",
      "9. Conduct user acceptance testing with stakeholders",
      "10. Promote to Production with gradual rollout (shadow mode, then enforcement)",
      "11. Set up monitoring alerts for policy violations and errors",
      "12. Document policy configuration and operational procedures"
    ],
    "sandbox_testing": [
      "🧪 Deploy to Sandbox environment first:",
      "   1. Create test users with various attribute combinations",
      "   2. Set up test resources with different classifications",
      "   3. Run test scenarios:",
      "      • User with all required attributes → ALLOW",
      "      • User missing required attribute → DENY",
      "      • User with insufficient privileges → DENY",
      "   4. Verify audit logs capture all evaluations",
      "   5. Check performance (policy evaluation < 100ms)",
      "   6. Test error handling (missing attributes, null values)"
    ],
    "configuration_tips": [
      "Start with permissive policies and gradually tighten restrictions",
      "Use policy versioning to track changes and enable rollbacks",
      "Implement comprehensive logging before enforcement",
      "Test in shadow mode to observe behavior without blocking access",
      "Document all customizations and environment-specific settings",
      "Set up monitoring dashboards for policy metrics",
      "Create runbooks for common policy-related incidents",
      "Establish a policy review and update schedule"
    ],
    "production_deployment": [
      "🚀 Production deployment checklist:",
      "   1. ✅ All sandbox tests passing",
      "   2. ✅ Stakeholder approval documented",
      "   3. ✅ Rollback plan prepared",
      "   4. ✅ Deploy in shadow mode (log only, don't enforce) for 24-48 hours",
      "   5. ✅ Review shadow mode logs for unexpected denials",
      "   6. ✅ Adjust policy based on real traffic patterns",
      "   7. ✅ Enable enforcement mode with gradual rollout (10% → 50% → 100%)",
      "   8. ✅ Monitor error rates and user feedback",
      "   9. ✅ Document deployment for compliance audit trail"
    ],
    "troubleshooting": [
      "Check Control Core logs if policy evaluation fails",
      "Verify all required attributes are available in request context",
      "Ensure data source integrations are healthy and responsive",
      "Review audit logs to understand policy decisions",
      "Use Control Core's policy testing tools to debug conditions",
      "Check for network connectivity issues between PEP and PDP",
      "Verify policy syntax and structure using validator",
      "Contact Control Core support for persistent issues"
    ],
    "prerequisites": [
      "✅ Inventory all systems needed for 15 conditions in this policy",
      "✅ Verify API access and credentials for each system",
      "✅ Test API endpoints return expected data format",
      "✅ Document field mappings between your systems and policy conditions",
      "✅ Ensure network connectivity from Control Core to all data sources"
    ],
    "data_source_configuration": [
      "\n📦 Identity And Access:",
      "   • Configure Custom data source integration for 'input.user.consent.explicit'",
      "     - API: REST API endpoint",
      "     - Field: user.consent.explicit",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.consent.freely_given'",
      "     - API: REST API endpoint",
      "     - Field: user.consent.freely_given",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.user.consent.gdpr'",
      "     - API: REST API endpoint",
      "     - Field: user.consent.gdpr",
      "     - Method: REST API",
      "\n📦 Data Sources:",
      "   • Configure Custom data source integration for 'input.data.sensitive'",
      "     - API: REST API endpoint",
      "     - Field: data.sensitive",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.processing.data_minimization'",
      "     - API: REST API endpoint",
      "     - Field: processing.data_minimization",
      "     - Method: REST API",
      "   • Configure Custom data source integration for 'input.processing.legal_basis'",
      "     - API: REST API endpoint",
      "     - Field: processing.legal_basis",
      "     - Method: REST API"
    ],
    "policy_customization": [
      "🔧 Review and customize the following conditions for your environment:",
      "   • User conditions (8): user.consent.explicit, user.consent.freely_given, user.consent.gdpr",
      "",
      "📝 Modification guidelines:",
      "   • Update attribute names to match your system's field names",
      "   • Adjust threshold values (e.g., risk scores, time windows)",
      "   • Add/remove conditions based on your requirements",
      "   • Test each condition individually before combining",
      "",
      "💾 Save modified policy with version tag for tracking"
    ],
    "monitoring_setup": [
      "📊 Set up monitoring and alerts:",
      "   • Policy evaluation count (baseline: track for 1 week)",
      "   • Denial rate (alert if > 5% of requests)",
      "   • Evaluation latency (alert if > 200ms p95)",
      "   • Missing attribute errors (alert on any occurrence)",
      "   • Condition-specific metrics:",
      "     1. Monitor 'input.data.sensitive' - track null/missing values",
      "     2. Monitor 'input.processing.data_minimization' - track null/missing values",
      "     3. Monitor 'input.processing.legal_basis' - track null/missing values",
      "     4. Monitor 'input.processing.legitimate_interest' - track null/missing values",
      "     5. Monitor 'input.processing.necessary' - track null/missing values"
    ]
  },
  "compliance_frameworks": [
    "GDPR Articles 5-6",
    "GDPR Article 35 (DPIA)",
    "WP29 Guidelines on DPIAs",
    "GDPR Accountability Principle"
  ],
  "risk_level": "critical",
  "tags": [
    "compliance",
    "protection",
    "data",
    "audit-logging",
    "gdpr"
  ],
  "related_templates": [
    "audit-logging-retention",
    "sox-compliance-controls",
    "hipaa-healthcare-privacy"
  ],
  "conditions_analysis": {
    "total_conditions": 15,
    "user_attributes": 8,
    "resource_attributes": 0,
    "context_attributes": 0
  },
  "integration_guide": {
    "overview": "This guide helps you integrate Control Core with your technical stack to fetch the required attributes.",
    "steps_by_system": [
      {
        "system": "Custom data source",
        "attributes_needed": [
          "input.user.consent.explicit",
          "input.user.consent.freely_given",
          "input.user.consent.gdpr",
          "input.user.consent.informed",
          "input.user.consent.purpose_change",
          "input.user.consent.specific",
          "input.user.consent.withdrawn",
          "input.user.request.type",
          "input.data.sensitive",
          "input.processing.data_minimization",
          "input.processing.legal_basis",
          "input.processing.legitimate_interest",
          "input.processing.necessary",
          "input.processing.original_purpose",
          "input.processing.purpose"
        ],
        "integration_steps": [
          "1. Obtain API credentials for Custom data source",
          "2. Test API access: REST API endpoint",
          "3. In Control Core: Settings → Integrations → Add Custom data source",
          "4. Configure field mappings for 15 attributes",
          "5. Test attribute retrieval with sample user/resource",
          "6. Enable caching (recommended: 5-15 minutes for user attributes)"
        ],
        "example_response": "Example API response will contain: user.consent.explicit, user.consent.freely_given, user.consent.gdpr"
      }
    ]
  }
}