# ControlCore Stack - Local Development (Complete)
# This file contains all ControlCore services including PDP, Policy Admin components, and Frontend
# 
# Usage:
#   kubectl apply -f controlcore-stack.yaml
#   
# Access:
#   Frontend:            http://localhost:7600
#   Policy Admin Server: http://localhost:7601
#   OPA Service:         http://localhost:7602
#   Policy Admin Client: http://localhost:7603
#   Policy Admin API:    http://localhost:7604
#   PDP Service:         http://localhost:7605

---
# cc-pap Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cc-pap
  labels:
    app: cc-pap
    stack: controlcore-stack
    env: local-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cc-pap
      stack: controlcore-stack
      env: local-dev
  template:
    metadata:
      labels:
        app: cc-pap
        stack: controlcore-stack
        env: local-dev
    spec:
      containers:
        - name: cc-pap
          image: YOUR_DOCKER_HUB_USERNAME/cc-pap:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7600
          env:
            - name: POLICY_SERVICE_URL
              value: "http://cc-pap:8082/api/v1"
            - name: REGAL_LSP_URL
              value: "ws://cc-regal-service:4389"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /api/health
              port: 7600
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /api/health
              port: 7600
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: cc-pap
  labels:
    stack: controlcore-stack
    env: local-dev
spec:
  selector:
    app: cc-pap
    stack: controlcore-stack
    env: local-dev
  ports:
    - port: 7600
      targetPort: 7600
      nodePort: 30760
  type: NodePort
---
# cc-policy-admin-server Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cc-policy-admin-server
  labels:
    app: cc-policy-admin-server
    stack: controlcore-stack
    env: local-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cc-policy-admin-server
      stack: controlcore-stack
      env: local-dev
  template:
    metadata:
      labels:
        app: cc-policy-admin-server
        stack: controlcore-stack
        env: local-dev
    spec:
      containers:
        - name: cc-policy-admin-server
          image: 061730756658.dkr.ecr.ca-central-1.amazonaws.com/controlcoreio/policy-admin:policy-admin-server-controlcoreio
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7002
          env:
            - name: OPAL_POLICY_SOURCE_TYPE
              value: "GIT"
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cc-pap-github-token
                  key: token
            - name: OPAL_POLICY_REPO_URL
              value: "https://$(GITHUB_TOKEN)@github.com/controlcoreio/staging-policies-repo.git"
            - name: OPAL_POLICY_REPO_CLONE_PATH
              value: "/tmp/staging-policies-repo"
            - name: OPAL_POLICY_REPO_MAIN_BRANCH
              value: "main"
            - name: OPAL_POLICY_REPO_POLLING_INTERVAL
              value: "30"
            - name: OPAL_DATA_CONFIG_SOURCES
              value: '{"config":{"entries":[{"url":"http://cc-policy-admin-server:7002/policy-data","topics":["policy_data"],"dst_path":"/static"}]}}'
            - name: OPAL_LOG_FORMAT_INCLUDE_PID
              value: "true"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            tcpSocket:
              port: 7002
            initialDelaySeconds: 10
            periodSeconds: 300
          livenessProbe:
            tcpSocket:
              port: 7002
            initialDelaySeconds: 30
            periodSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: cc-policy-admin-server
  labels:
    stack: controlcore-stack
    env: local-dev
spec:
  selector:
    app: cc-policy-admin-server
    stack: controlcore-stack
    env: local-dev
  ports:
    - port: 7002
      targetPort: 7002
      nodePort: 30761
  type: NodePort
---
# cc-policy-admin-client Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cc-policy-admin-client
  labels:
    app: cc-policy-admin-client
    stack: controlcore-stack
    env: local-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cc-policy-admin-client
      stack: controlcore-stack
      env: local-dev
  template:
    metadata:
      labels:
        app: cc-policy-admin-client
        stack: controlcore-stack
        env: local-dev
    spec:
      containers:
        - name: cc-policy-admin-client
          image: 061730756658.dkr.ecr.ca-central-1.amazonaws.com/controlcoreio/policy-admin:policy-admin-client-controlcoreio
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8083
          env:
            - name: OPAL_CLIENT_API_SERVER_PORT
              value: "8083"
            - name: OPAL_SERVER_URL
              value: "http://cc-policy-admin-server:7002"
            - name: OPAL_LOG_FORMAT_INCLUDE_PID
              value: "true"
            - name: OPAL_INLINE_OPA_LOG_FORMAT
              value: "http"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /v1/policies
              port: 8181
            initialDelaySeconds: 15
            periodSeconds: 300
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /v1/policies
              port: 8181
            initialDelaySeconds: 30
            periodSeconds: 300
            timeoutSeconds: 5
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: cc-policy-admin-client
  labels:
    stack: controlcore-stack
    env: local-dev
spec:
  selector:
    app: cc-policy-admin-client
    stack: controlcore-stack
    env: local-dev
  ports:
    - name: client
      port: 8083
      targetPort: 8083
      nodePort: 30762
    - name: opa
      port: 8181
      targetPort: 8181
      nodePort: 30763
  type: NodePort
---
# cc-policy-admin-api Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cc-policy-admin-api
  labels:
    app: cc-policy-admin-api
    stack: controlcore-stack
    env: local-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cc-policy-admin-api
      stack: controlcore-stack
      env: local-dev
  template:
    metadata:
      labels:
        app: cc-policy-admin-api
        stack: controlcore-stack
        env: local-dev
      annotations:
        # Force pod restart when config changes
        kubectl.kubernetes.io/restartedAt: "TIMESTAMP_PLACEHOLDER"
    spec:
      containers:
        - name: cc-policy-admin-api
          # Use a more specific tag or add timestamp to force updates
          image: YOUR_DOCKER_HUB_USERNAME/cc-policy-admin-api:latest
          # CRITICAL: Change to IfNotPresent to allow image updates
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8082
          env:
            - name: PORT
              value: "8082"
            - name: OPA_URL
              value: "http://cc-policy-admin-client:8181"
            - name: OPAL_SERVER_URL
              value: "http://cc-policy-admin-server:7002"
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cc-pap-github-token
                  key: token
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          # Startup probe: Give time for initial startup and OPA connection
          startupProbe:
            httpGet:
              path: /api/v1/policies
              port: 8082
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 10
            failureThreshold: 12  # Allow 60 seconds for startup
            successThreshold: 1
          # Readiness probe: Check if service can handle requests
          readinessProbe:
            httpGet:
              path: /api/v1/policies
              port: 8082
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          # Liveness probe: Check if service is alive
          livenessProbe:
            httpGet:
              path: /api/v1/policies
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: cc-pap
  labels:
    stack: controlcore-stack
    env: local-dev
spec:
  selector:
    app: cc-policy-admin-api
    stack: controlcore-stack
    env: local-dev
  ports:
    - port: 8082
      targetPort: 8082
      nodePort: 30764
  type: NodePort
---
# cc-bouncer Service (includes integrated PDP)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cc-bouncer
  labels:
    app: cc-bouncer
    stack: controlcore-stack
    env: local-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cc-bouncer
      stack: controlcore-stack
      env: local-dev
  template:
    metadata:
      labels:
        app: cc-bouncer
        stack: controlcore-stack
        env: local-dev
    spec:
      containers:
        - name: cc-bouncer
          image: YOUR_DOCKER_HUB_USERNAME/cc-bouncer:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
          env:
            - name: PORT
              value: "8081"
            - name: OPA_URL
              value: "http://cc-policy-admin-client:8181"
            - name: PAP_URL
              value: "http://cc-pap:8082"
            - name: GIN_MODE
              value: "release"
            - name: LOG_LEVEL
              value: "info"
          resources:
            requests:
              memory: "128Mi"     # Increased from 64Mi
              cpu: "100m"         # Increased from 50m
            limits:
              memory: "256Mi"     # Increased from 128Mi to prevent OOM
              cpu: "500m"         # Increased from 200m
          # Readiness probe: Check if the service can accept traffic
          readinessProbe:
            httpGet:
              path: /healthz        # Match Docker Compose health endpoint
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30      # Match Docker Compose interval
            timeoutSeconds: 10     # Match Docker Compose timeout
            failureThreshold: 3    # Match Docker Compose retries
            successThreshold: 1
          # Liveness probe: Check if the service is alive
          livenessProbe:
            httpGet:
              path: /healthz       # Match Docker Compose health endpoint
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 30      # Match Docker Compose interval
            timeoutSeconds: 10     # Match Docker Compose timeout
            failureThreshold: 3    # Match Docker Compose retries
            successThreshold: 1
          # Startup probe: Give more time for initial startup
          startupProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 10     # Match Docker Compose timeout
            failureThreshold: 30   # Allow 150 seconds for startup
            successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: cc-bouncer
  labels:
    stack: controlcore-stack
    env: local-dev
spec:
  selector:
    app: cc-bouncer
    stack: controlcore-stack
    env: local-dev
  ports:
    - port: 8081
      targetPort: 8081
      nodePort: 30765
  type: NodePort